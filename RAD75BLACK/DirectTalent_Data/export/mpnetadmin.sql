CREATE TABLE  "SITES" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITECODE" VARCHAR2(15) NOT NULL ENABLE, 
	"SITENAME" VARCHAR2(25) NOT NULL ENABLE, 
	"SITEOWNER" VARCHAR2(50) NOT NULL ENABLE, 
	"SITEFIRSTLANG" VARCHAR2(25) NOT NULL ENABLE, 
	"SITESECONDLANG" VARCHAR2(25) NOT NULL ENABLE, 
	"SITETHIRDLANG" VARCHAR2(25) NOT NULL ENABLE, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(200) NOT NULL ENABLE, 
	"CHANGED_ON" DATE NOT NULL ENABLE, 
	"CHANGED_BY" VARCHAR2(200) NOT NULL ENABLE, 
	"UPDATEDON" DATE NOT NULL ENABLE, 
	"UPDATEDBY" VARCHAR2(200) NOT NULL ENABLE, 
	"COUNTRYCODE" VARCHAR2(4), 
	"SITESTATUS" VARCHAR2(10), 
	"DEFAULT_LEVEL" VARCHAR2(10), 
	"INTEGRATIONFLAG" VARCHAR2(1), 
	"DISTANCE_UNIT" VARCHAR2(2), 
	"RESOURCE_PREFIX" VARCHAR2(4) NOT NULL ENABLE, 
	"BG_FLAG" VARCHAR2(1) NOT NULL ENABLE, 
	 CONSTRAINT "SITES_ID_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "EMAIL_UNICO_USERS" UNIQUE ("SITENAME") ENABLE, 
	 CONSTRAINT "SITECODIGO_UNICO" UNIQUE ("SITECODE") ENABLE
   );

CREATE TABLE  "ADDRESSES" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"ADDRESSTYPE" VARCHAR2(10) NOT NULL ENABLE, 
	"ADDRESS1" VARCHAR2(200), 
	"ADDRESS2" VARCHAR2(200), 
	"POBOX" VARCHAR2(150), 
	"CITY" VARCHAR2(50), 
	"STATE" VARCHAR2(50), 
	"CODE" CHAR(15), 
	"COUNTRY" VARCHAR2(25), 
	"CANDIDATE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CREATED_ON" DATE, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	"ADDRESS3" VARCHAR2(100), 
	 CONSTRAINT "ADDRESSES" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "ADDRESSES_SITEID_FK" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE
   );

CREATE TABLE  "BRANCHES" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"BRANCHNAME" VARCHAR2(100) NOT NULL ENABLE, 
	"ADDRESS1" VARCHAR2(100) NOT NULL ENABLE, 
	"ADDRESS2" VARCHAR2(100) NOT NULL ENABLE, 
	"CITY" VARCHAR2(100) NOT NULL ENABLE, 
	"STATE" VARCHAR2(50) NOT NULL ENABLE, 
	"CODE" VARCHAR2(50) NOT NULL ENABLE, 
	"COUNTRY" VARCHAR2(100) NOT NULL ENABLE, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	"SPECIALITY" VARCHAR2(100), 
	"STREET" VARCHAR2(100), 
	"EMAIL" VARCHAR2(100), 
	"PHONENUMBER" VARCHAR2(35), 
	"FAXNUMBER" VARCHAR2(35), 
	"POSTALCODE" VARCHAR2(35), 
	"LOCATION_INFO" VARCHAR2(100), 
	"OPERATION_HOURS" VARCHAR2(50), 
	"ADDITIONAL_INFO" VARCHAR2(250), 
	"LANG" VARCHAR2(10) NOT NULL ENABLE, 
	"EXTERNAL_ID" VARCHAR2(50), 
	 CONSTRAINT "BRANCHES_ID_PK_1_1" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "BRANCH_SITE_FK_PK_1_1" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE
   );

CREATE TABLE  "ADVERTISEMENTCONTACTS" 
   (	"ADVERTCONTACTID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"NAME" VARCHAR2(100) NOT NULL ENABLE, 
	"ADDRESS1" VARCHAR2(100), 
	"ADDRESS2" VARCHAR2(100), 
	"POBOX" VARCHAR2(100), 
	"CITY" VARCHAR2(35), 
	"STATE" VARCHAR2(25), 
	"POSTALCODE" CHAR(15), 
	"COUNTRY" VARCHAR2(25), 
	"BRANCH_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"ADVERTISEMENTID" NUMBER(10,0), 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(200) NOT NULL ENABLE, 
	"CHANGED_ON" DATE NOT NULL ENABLE, 
	"CHANGED_BY" VARCHAR2(200) NOT NULL ENABLE, 
	"UPDATEDON" DATE NOT NULL ENABLE, 
	"UPDATEDBY" VARCHAR2(200) NOT NULL ENABLE, 
	"EXTERNALID" VARCHAR2(32), 
	"PHONENUMBER" VARCHAR2(50), 
	 CONSTRAINT "CONTACTS_ID_PK" UNIQUE ("ADVERTCONTACTID") ENABLE, 
	 CONSTRAINT "CONTACTS_SITEID_FK" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE, 
	 CONSTRAINT "CONTACTS_BRANCHID_FK" FOREIGN KEY ("BRANCH_ID")
	  REFERENCES  "BRANCHES" ("ID") ENABLE
   );

CREATE TABLE  "ADVERTISEMENTPUBLICATIONS" 
   (	"ADVERTPUBID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITEID" NUMBER(10,0) NOT NULL ENABLE, 
	"PUBLISHER" VARCHAR2(50) NOT NULL ENABLE, 
	"MEDIUM" VARCHAR2(50) NOT NULL ENABLE, 
	"STARTDATE" DATE, 
	"ENDDATE" DATE, 
	"ADVERTISEMENT_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(200) NOT NULL ENABLE, 
	"CHANGED_ON" DATE NOT NULL ENABLE, 
	"CHANGED_BY" VARCHAR2(200) NOT NULL ENABLE, 
	"UPDATEDON" DATE NOT NULL ENABLE, 
	"UPDATEDBY" VARCHAR2(200) NOT NULL ENABLE, 
	"EXTERNALID" VARCHAR2(32), 
	 CONSTRAINT "ADVERTPUB_ADVERTPUBID_PK" PRIMARY KEY ("ADVERTPUBID") ENABLE
   );

CREATE TABLE  "ADVERTISEMENTS" 
   (	"ADVERTISEMENTID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"JOBTITLE" VARCHAR2(100), 
	"JOBDESCRIPTION" VARCHAR2(4000), 
	"CANDIDATEPROFILE" VARCHAR2(4000), 
	"CANDIDATESKILLS" VARCHAR2(500), 
	"INDUSTRYSECTOR" VARCHAR2(25), 
	"LOCATION" VARCHAR2(100), 
	"LON_COORDINATE" NUMBER DEFAULT null NOT NULL ENABLE, 
	"CONTRACTTYPE" VARCHAR2(50), 
	"PUBLICATIONDATE" DATE, 
	"CLIENTNAME" VARCHAR2(100), 
	"PAYRANGE" VARCHAR2(30), 
	"REFERENCENUMBER" VARCHAR2(50), 
	"REQUIREDSKILLID" NUMBER(10,0), 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	"ADVERTCONTACTID" NUMBER(10,0), 
	"EXPIRATIONDATE" DATE, 
	"REG_LEVEL" CHAR(1), 
	"LAT_COORDINATE" NUMBER DEFAULT null NOT NULL ENABLE, 
	"HOURSWORKED" VARCHAR2(50), 
	"ASSESSMENT_TEST" VARCHAR2(200), 
	"LANGUAGE" VARCHAR2(30), 
	"EXTERNALID" VARCHAR2(32), 
	"BUSINESSARREA" VARCHAR2(100), 
	"JOBCOUNTRY" VARCHAR2(10), 
	"LOC_FREEFORM" CHAR(1), 
	"CAREERHARMONY_ID" NUMBER(10,0) DEFAULT null NOT NULL ENABLE, 
	 CONSTRAINT "ADVERTISEMENT_ID_PK" PRIMARY KEY ("ADVERTISEMENTID") ENABLE, 
	 CONSTRAINT "SITES_FK" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE, 
	 CONSTRAINT "ADVERTCONTACTS_FK" FOREIGN KEY ("ADVERTCONTACTID")
	  REFERENCES  "ADVERTISEMENTCONTACTS" ("ADVERTCONTACTID") ENABLE
   );

CREATE TABLE  "CANDIDATES" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"STATUS" CHAR(1) NOT NULL ENABLE, 
	"WORKPERMITEXPDATE" DATE, 
	"WORKPERMITS" VARCHAR2(10), 
	"NATIONALITY" VARCHAR2(50), 
	"RESIDENCESTATUS" VARCHAR2(10), 
	"RESIDENCEPERMIT" VARCHAR2(100), 
	"RESIDENCEPERMINTEXPDATE" DATE, 
	"PASSPORTEXPDATE" DATE, 
	"BRANCH_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"PERSON_ID" NUMBER(10,0), 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	"BIRTHDATE" DATE, 
	"BIRTHPLACE" VARCHAR2(50), 
	"GENDER" VARCHAR2(50), 
	"MARITIALSTATUS" CHAR(1), 
	"EMAIL" VARCHAR2(100), 
	"PASSWORD" VARCHAR2(20), 
	"PASSWORDHINTQUESTION" VARCHAR2(200), 
	"PASSWORDHINTANSWER" VARCHAR2(200), 
	"USERAPPLICATIONLANGUAGE" CHAR(3), 
	"FIRSTNAME" VARCHAR2(50), 
	"MIDDLENAME" VARCHAR2(50), 
	"LASTNAME" VARCHAR2(50), 
	"NATIONALNUMBER" VARCHAR2(50), 
	"CONTACT_BY_EMAIL" CHAR(1), 
	"REG_LEVEL" CHAR(1), 
	"CORRESPONDEMAIL" VARCHAR2(100), 
	"NATIVE_LANGUAGE" VARCHAR2(50), 
	 CONSTRAINT "CANDIDATE_ID_PK_1_1" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "CANDIDATES_BRANCHID_FK" FOREIGN KEY ("BRANCH_ID")
	  REFERENCES  "BRANCHES" ("ID") DISABLE, 
	 CONSTRAINT "CANDIDATES_SITE_ID_FK_1_1" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE
   );

CREATE TABLE  "CANDIDATEEDUCATIONS" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SCHOOLNAME" VARCHAR2(100) NOT NULL ENABLE, 
	"COURSENAME" VARCHAR2(100), 
	"CITY" VARCHAR2(50) NOT NULL ENABLE, 
	"REGION" VARCHAR2(50) NOT NULL ENABLE, 
	"COUNTRY" VARCHAR2(50) NOT NULL ENABLE, 
	"CERTIFICATENAME" VARCHAR2(50), 
	"COMPLETIONDATE" DATE, 
	"DESCRIPTION" VARCHAR2(500), 
	"CANDIDATE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CREATED_ON" DATE DEFAULT SYSDATE, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	"DEGREECODE" VARCHAR2(50), 
	 CONSTRAINT "EDUCATION_ID_PK_1" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "EDU_CANDI-FK_ID" FOREIGN KEY ("CANDIDATE_ID")
	  REFERENCES  "CANDIDATES" ("ID") ON DELETE CASCADE ENABLE, 
	 CONSTRAINT "EDUCATION_SITESID_FK_1" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE
   );

CREATE TABLE  "CANDIDATEJOBHISTORIES" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"STARTDATE" DATE NOT NULL ENABLE, 
	"ENDDATE" DATE, 
	"COMPANY" VARCHAR2(200), 
	"LOCATION" VARCHAR2(200), 
	"INDUSTRY" VARCHAR2(200), 
	"JOBTITLE" VARCHAR2(200), 
	"DESCRIPTION" VARCHAR2(2000), 
	"CANDIDATE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	 CONSTRAINT "JOBHISTO_ID_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "HISTO_CANDI_FK_ID" FOREIGN KEY ("CANDIDATE_ID")
	  REFERENCES  "CANDIDATES" ("ID") ON DELETE CASCADE ENABLE, 
	 CONSTRAINT "JOBHIS_SITE_ID_FK" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE
   );

CREATE TABLE  "CANDIDATEPREFERENCES" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CANDIDATE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	"CONTACTMETHOD" VARCHAR2(6) DEFAULT null, 
	"CONTRACTTYPE" VARCHAR2(10), 
	"JOBTITLE" VARCHAR2(50), 
	"POSITIONTYPE" VARCHAR2(50), 
	"DISTANCEUNITS" VARCHAR2(10), 
	"INDUSTRYSECTOR" VARCHAR2(100), 
	"WORKSHIFTS" VARCHAR2(10), 
	"FLEXHOURS" VARCHAR2(10), 
	"INTROTOMANPOWER" VARCHAR2(10), 
	"WORKTYPE" VARCHAR2(100), 
	"HOURSPERWEEK" NUMBER(10,0), 
	"STARTDATE" DATE, 
	"RELOCATEINTERNATIONAL" CHAR(1), 
	"RELOCATECOUNTRY" CHAR(1), 
	"PREFEREDLOCATION" VARCHAR2(100), 
	"PROXIMITY" VARCHAR2(10), 
	"ROLEDESC" VARCHAR2(1000), 
	 CONSTRAINT "CANDIDATEPREFERENCES_ID_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "CANDIDATEPREFERENCES_CANDID_PK" FOREIGN KEY ("CANDIDATE_ID")
	  REFERENCES  "CANDIDATES" ("ID") ON DELETE CASCADE ENABLE, 
	 CONSTRAINT "CANDIDATEPREFERENCES_SITEID_FK" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE
   );

CREATE TABLE  "CANDIDATEREFERENCES" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"NAME" VARCHAR2(100) NOT NULL ENABLE, 
	"PHONE" VARCHAR2(25), 
	"COMPANY" VARCHAR2(100), 
	"EMAIL" VARCHAR2(100), 
	"TITLE" VARCHAR2(100), 
	"REFERENCETYPE" VARCHAR2(4) NOT NULL ENABLE, 
	"CANDIDATE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	"RELATIONSHIP" VARCHAR2(200), 
	"CONTACT" VARCHAR2(4), 
	 CONSTRAINT "CANDIDATEREFERENCES_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "CANDIDATEREFERENCES_CANDID_FK" FOREIGN KEY ("CANDIDATE_ID")
	  REFERENCES  "CANDIDATES" ("ID") ON DELETE CASCADE ENABLE, 
	 CONSTRAINT "CANDIDATEREFERENCES_SITEID_FK" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE
   );

CREATE TABLE  "CANDIDATESAVEJOBS" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"DATESAVED" DATE NOT NULL ENABLE, 
	"ADVERTISEMENT_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CANDIDATE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	 CONSTRAINT "SAVEJOBS_ID_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "SAVEJOBS_ADVERT_FK" FOREIGN KEY ("ADVERTISEMENT_ID")
	  REFERENCES  "ADVERTISEMENTS" ("ADVERTISEMENTID") ON DELETE CASCADE ENABLE, 
	 CONSTRAINT "SAVEJOBS_CANDID_FK" FOREIGN KEY ("CANDIDATE_ID")
	  REFERENCES  "CANDIDATES" ("ID") ON DELETE CASCADE ENABLE, 
	 CONSTRAINT "SAVEJOBS_SITE_ID_FK" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE
   );

CREATE TABLE  "SKILLS" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SKILLNAME" VARCHAR2(256) NOT NULL ENABLE, 
	"SKILLDESCRIPTION" VARCHAR2(256) NOT NULL ENABLE, 
	"PARENT_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	"LANG" VARCHAR2(2), 
	 CONSTRAINT "SKILL_ID_PK_1_1" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "SYS_C003269" CHECK ("ID" IS NOT NULL) ENABLE, 
	 CONSTRAINT "SYS_C003270" CHECK ("SITE_ID" IS NOT NULL) ENABLE, 
	 CONSTRAINT "SYS_C003271" CHECK ("SKILLNAME" IS NOT NULL) ENABLE, 
	 CONSTRAINT "SYS_C003272" CHECK ("PARENT_ID" IS NOT NULL) ENABLE, 
	 CONSTRAINT "SKILL_SITE_ID_FK_1_1" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE
   );

CREATE TABLE  "CANDIDATESKILLS" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"LASTUSED" DATE NOT NULL ENABLE, 
	"SKILLLEVEL" VARCHAR2(25) NOT NULL ENABLE, 
	"YEARSOFEXP" NUMBER(10,1) NOT NULL ENABLE, 
	"SKILLS_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CANDIDATE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	 CONSTRAINT "CANDIDATESKILLS_ID_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "CANDIDATESKILLS_SITEID_FK" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE, 
	 CONSTRAINT "CANDIDATESKILLS_SKILLID_FK" FOREIGN KEY ("SKILLS_ID")
	  REFERENCES  "SKILLS" ("ID") ENABLE, 
	 CONSTRAINT "CANDIDATESKILLS_CANDID_FK" FOREIGN KEY ("CANDIDATE_ID")
	  REFERENCES  "CANDIDATES" ("ID") ON DELETE CASCADE ENABLE
   );

CREATE TABLE  "CAREERHARMONY" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SECURITYKEY" VARCHAR2(40) NOT NULL ENABLE, 
	"PROJECT_ID" VARCHAR2(40), 
	"COMPANY_ID" VARCHAR2(40), 
	"LANGUAGE_ID" VARCHAR2(2), 
	"NOTIFICATION" NUMBER(2,0), 
	"CREATED_ON" DATE DEFAULT SYSDATE, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATED_ON" DATE, 
	"UPDATED_BY" VARCHAR2(200), 
	 CONSTRAINT "CAREERHARMONY_ID_PK_1_1" PRIMARY KEY ("ID") ENABLE
   );

CREATE TABLE  "CONFIGURATION" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"SITE_ID" NUMBER NOT NULL ENABLE, 
	"CONDIDIONAL_BINDING" VARCHAR2(200), 
	"VIEWABLE" VARCHAR2(4), 
	 CONSTRAINT "CONF_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "CONF_SITEID_FK" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE
   );

CREATE TABLE  "CONSENT" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CONSENT_TYPE" VARCHAR2(100) NOT NULL ENABLE, 
	"CONSENT_VALUE" VARCHAR2(100), 
	"CANDIDATE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CREATED_ON" DATE DEFAULT SYSDATE, 
	 CONSTRAINT "CONSENT_ID_PK_1" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "CONSENT_CANDI_FK_ID" FOREIGN KEY ("CANDIDATE_ID")
	  REFERENCES  "CANDIDATES" ("ID") ON DELETE CASCADE ENABLE, 
	 CONSTRAINT "CONSENT_SITESID_FK_1" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE
   );

CREATE TABLE  "COUNTRIES" 
   (	"COUNTRY_CODE" VARCHAR2(10), 
	"COUNRTY" VARCHAR2(100)
   );

CREATE TABLE  "COUNTRYLOCATIONS" 
   (	"ID" NUMBER(22,0) NOT NULL ENABLE, 
	"COUNTRY_CODE" VARCHAR2(10) NOT NULL ENABLE, 
	"REGION_CODE" VARCHAR2(100), 
	"LOCATION_CODE" VARCHAR2(100), 
	"LONGITUDE" NUMBER NOT NULL ENABLE, 
	"LATITUDE" NUMBER NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(100) NOT NULL ENABLE, 
	"CREATED_ON" DATE NOT NULL ENABLE, 
	"UPDATED_BY" VARCHAR2(100) NOT NULL ENABLE, 
	"UPDATED_ON" DATE NOT NULL ENABLE, 
	"ISPREFERREDLOCATION" VARCHAR2(1), 
	 CONSTRAINT "COUNTRY_LOCATIONS" PRIMARY KEY ("ID") ENABLE
   );

CREATE TABLE  "DR$ADVERTISEMENTS_XCANSKILLS$I" 
   (	"TOKEN_TEXT" VARCHAR2(64) NOT NULL ENABLE, 
	"TOKEN_TYPE" NUMBER(3,0) NOT NULL ENABLE, 
	"TOKEN_FIRST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_LAST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_COUNT" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_INFO" BLOB
   );

CREATE TABLE  "DR$ADVERTISEMENTS_XCANSKILLS$K" 
   (	"DOCID" NUMBER(38,0), 
	"TEXTKEY" ROWID, 
	 PRIMARY KEY ("TEXTKEY") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$ADVERTISEMENTS_XCANSKILLS$N" 
   (	"NLT_DOCID" NUMBER(38,0), 
	"NLT_MARK" CHAR(1) NOT NULL ENABLE, 
	 PRIMARY KEY ("NLT_DOCID") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$ADVERTISEMENTS_XCANSKILLS$R" 
   (	"ROW_NO" NUMBER(3,0), 
	"DATA" BLOB
   )
/
CREATE TABLE  "DR$ADVERTISEMENTS_XCPROFILE$I" 
   (	"TOKEN_TEXT" VARCHAR2(64) NOT NULL ENABLE, 
	"TOKEN_TYPE" NUMBER(3,0) NOT NULL ENABLE, 
	"TOKEN_FIRST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_LAST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_COUNT" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_INFO" BLOB
   )
/
CREATE TABLE  "DR$ADVERTISEMENTS_XCPROFILE$K" 
   (	"DOCID" NUMBER(38,0), 
	"TEXTKEY" ROWID, 
	 PRIMARY KEY ("TEXTKEY") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$ADVERTISEMENTS_XCPROFILE$N" 
   (	"NLT_DOCID" NUMBER(38,0), 
	"NLT_MARK" CHAR(1) NOT NULL ENABLE, 
	 PRIMARY KEY ("NLT_DOCID") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$ADVERTISEMENTS_XCPROFILE$R" 
   (	"ROW_NO" NUMBER(3,0), 
	"DATA" BLOB
   )
/
CREATE TABLE  "DR$ADVERTISEMENTS_XINDUS$I" 
   (	"TOKEN_TEXT" VARCHAR2(64) NOT NULL ENABLE, 
	"TOKEN_TYPE" NUMBER(3,0) NOT NULL ENABLE, 
	"TOKEN_FIRST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_LAST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_COUNT" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_INFO" BLOB
   )
/
CREATE TABLE  "DR$ADVERTISEMENTS_XINDUS$K" 
   (	"DOCID" NUMBER(38,0), 
	"TEXTKEY" ROWID, 
	 PRIMARY KEY ("TEXTKEY") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$ADVERTISEMENTS_XINDUS$N" 
   (	"NLT_DOCID" NUMBER(38,0), 
	"NLT_MARK" CHAR(1) NOT NULL ENABLE, 
	 PRIMARY KEY ("NLT_DOCID") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$ADVERTISEMENTS_XINDUS$R" 
   (	"ROW_NO" NUMBER(3,0), 
	"DATA" BLOB
   )
/
CREATE TABLE  "DR$ADVERTISEMENTS_XJOBDSC$I" 
   (	"TOKEN_TEXT" VARCHAR2(64) NOT NULL ENABLE, 
	"TOKEN_TYPE" NUMBER(3,0) NOT NULL ENABLE, 
	"TOKEN_FIRST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_LAST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_COUNT" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_INFO" BLOB
   )
/
CREATE TABLE  "DR$ADVERTISEMENTS_XJOBDSC$K" 
   (	"DOCID" NUMBER(38,0), 
	"TEXTKEY" ROWID, 
	 PRIMARY KEY ("TEXTKEY") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$ADVERTISEMENTS_XJOBDSC$N" 
   (	"NLT_DOCID" NUMBER(38,0), 
	"NLT_MARK" CHAR(1) NOT NULL ENABLE, 
	 PRIMARY KEY ("NLT_DOCID") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$ADVERTISEMENTS_XJOBDSC$R" 
   (	"ROW_NO" NUMBER(3,0), 
	"DATA" BLOB
   )
/
CREATE TABLE  "DR$ADVERTISEMENTS_XJOBTITLE$I" 
   (	"TOKEN_TEXT" VARCHAR2(64) NOT NULL ENABLE, 
	"TOKEN_TYPE" NUMBER(3,0) NOT NULL ENABLE, 
	"TOKEN_FIRST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_LAST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_COUNT" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_INFO" BLOB
   )
/
CREATE TABLE  "DR$ADVERTISEMENTS_XJOBTITLE$K" 
   (	"DOCID" NUMBER(38,0), 
	"TEXTKEY" ROWID, 
	 PRIMARY KEY ("TEXTKEY") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$ADVERTISEMENTS_XJOBTITLE$N" 
   (	"NLT_DOCID" NUMBER(38,0), 
	"NLT_MARK" CHAR(1) NOT NULL ENABLE, 
	 PRIMARY KEY ("NLT_DOCID") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$ADVERTISEMENTS_XJOBTITLE$R" 
   (	"ROW_NO" NUMBER(3,0), 
	"DATA" BLOB
   )
/
CREATE TABLE  "DR$ADVERTISEMENTS_XLOCATION$I" 
   (	"TOKEN_TEXT" VARCHAR2(64) NOT NULL ENABLE, 
	"TOKEN_TYPE" NUMBER(3,0) NOT NULL ENABLE, 
	"TOKEN_FIRST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_LAST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_COUNT" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_INFO" BLOB
   )
/
CREATE TABLE  "DR$ADVERTISEMENTS_XLOCATION$K" 
   (	"DOCID" NUMBER(38,0), 
	"TEXTKEY" ROWID, 
	 PRIMARY KEY ("TEXTKEY") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$ADVERTISEMENTS_XLOCATION$N" 
   (	"NLT_DOCID" NUMBER(38,0), 
	"NLT_MARK" CHAR(1) NOT NULL ENABLE, 
	 PRIMARY KEY ("NLT_DOCID") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$ADVERTISEMENTS_XLOCATION$R" 
   (	"ROW_NO" NUMBER(3,0), 
	"DATA" BLOB
   )
/
CREATE TABLE  "DR$GEOLOCATION_XMUNICIPALITY$I" 
   (	"TOKEN_TEXT" VARCHAR2(64) NOT NULL ENABLE, 
	"TOKEN_TYPE" NUMBER(3,0) NOT NULL ENABLE, 
	"TOKEN_FIRST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_LAST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_COUNT" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_INFO" BLOB
   )
/
CREATE TABLE  "DR$GEOLOCATION_XMUNICIPALITY$K" 
   (	"DOCID" NUMBER(38,0), 
	"TEXTKEY" ROWID, 
	 PRIMARY KEY ("TEXTKEY") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$GEOLOCATION_XMUNICIPALITY$N" 
   (	"NLT_DOCID" NUMBER(38,0), 
	"NLT_MARK" CHAR(1) NOT NULL ENABLE, 
	 PRIMARY KEY ("NLT_DOCID") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$GEOLOCATION_XMUNICIPALITY$R" 
   (	"ROW_NO" NUMBER(3,0), 
	"DATA" BLOB
   )
/
CREATE TABLE  "DR$REGIONS_XPREFERREDLOC$I" 
   (	"TOKEN_TEXT" VARCHAR2(64) NOT NULL ENABLE, 
	"TOKEN_TYPE" NUMBER(3,0) NOT NULL ENABLE, 
	"TOKEN_FIRST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_LAST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_COUNT" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_INFO" BLOB
   )
/
CREATE TABLE  "DR$REGIONS_XPREFERREDLOC$K" 
   (	"DOCID" NUMBER(38,0), 
	"TEXTKEY" ROWID, 
	 PRIMARY KEY ("TEXTKEY") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$REGIONS_XPREFERREDLOC$N" 
   (	"NLT_DOCID" NUMBER(38,0), 
	"NLT_MARK" CHAR(1) NOT NULL ENABLE, 
	 PRIMARY KEY ("NLT_DOCID") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$REGIONS_XPREFERREDLOC$R" 
   (	"ROW_NO" NUMBER(3,0), 
	"DATA" BLOB
   )
/
CREATE TABLE  "DR$XLOCATIONNAMES$I" 
   (	"TOKEN_TEXT" VARCHAR2(64) NOT NULL ENABLE, 
	"TOKEN_TYPE" NUMBER(3,0) NOT NULL ENABLE, 
	"TOKEN_FIRST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_LAST" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_COUNT" NUMBER(10,0) NOT NULL ENABLE, 
	"TOKEN_INFO" BLOB
   )
/
CREATE TABLE  "DR$XLOCATIONNAMES$K" 
   (	"DOCID" NUMBER(38,0), 
	"TEXTKEY" ROWID, 
	 PRIMARY KEY ("TEXTKEY") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$XLOCATIONNAMES$N" 
   (	"NLT_DOCID" NUMBER(38,0), 
	"NLT_MARK" CHAR(1) NOT NULL ENABLE, 
	 PRIMARY KEY ("NLT_DOCID") ENABLE
   ) ORGANIZATION INDEX NOCOMPRESS
/
CREATE TABLE  "DR$XLOCATIONNAMES$R" 
   (	"ROW_NO" NUMBER(3,0), 
	"DATA" BLOB
   )
/
CREATE TABLE  "EDUCATIONDEGREES" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"COUNTRY" VARCHAR2(10) NOT NULL ENABLE, 
	"LANG" VARCHAR2(10) NOT NULL ENABLE, 
	"DEGREE_CODE" VARCHAR2(10) NOT NULL ENABLE, 
	"DEGREE_DESC" VARCHAR2(100) NOT NULL ENABLE, 
	"CREATED_ON" DATE, 
	"CREATED_BY" VARCHAR2(50), 
	"UPDATED_ON" DATE, 
	"UPDATED_BY" VARCHAR2(50), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(50), 
	 CONSTRAINT "DEGREE_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "DEGREE_UNIQUE" UNIQUE ("COUNTRY", "LANG", "DEGREE_CODE") ENABLE
   );

CREATE TABLE  "EMAILS" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CANDIDATE_ID" NUMBER(10,0), 
	"CANDIDATEREFERENCE_ID" NUMBER(10,0), 
	"SITE_ID" NUMBER(10,0), 
	"FRIENDS_NAME" VARCHAR2(25), 
	"FRIENDS_EMAIL" VARCHAR2(50), 
	"MESSAGE" VARCHAR2(4000), 
	"STATE" CHAR(1), 
	"CREATED_ON" DATE, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	"TYPE" VARCHAR2(25), 
	"SENDER_EMAIL" VARCHAR2(50), 
	"SUBJECT" VARCHAR2(100), 
	"FROM_LINE" VARCHAR2(50), 
	 CONSTRAINT "EMAILS_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "SITES_FK_EMAILS" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE, 
	 CONSTRAINT "CANDIDATES_FK_EMAILS" FOREIGN KEY ("CANDIDATE_ID")
	  REFERENCES  "CANDIDATES" ("ID") ENABLE, 
	 CONSTRAINT "CANDIDATEREFERENCES_FK_E" FOREIGN KEY ("CANDIDATEREFERENCE_ID")
	  REFERENCES  "CANDIDATEREFERENCES" ("ID") ENABLE
   );

CREATE TABLE  "EMAIL_CONTROL" 
   (	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"ACTIVE" CHAR(1), 
	"CREATED_ON" DATE, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	 CONSTRAINT "EMAIL_CONTROL_UNIQ_SITEID" UNIQUE ("SITE_ID") ENABLE
   );

CREATE TABLE  "EMAIL_RESOURCE" 
   (	"EMAIL_RESOURCEID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0), 
	"LANGUAGE" VARCHAR2(6), 
	"MESSAGE_ID" VARCHAR2(50), 
	"MESSAGE_TEXT" VARCHAR2(3000)
   );

CREATE TABLE  "GEOLOCATION" 
   (	"GEOLOCATIONID" NUMBER NOT NULL ENABLE, 
	"COUNTRYNAME" VARCHAR2(100), 
	"REGION" VARCHAR2(100), 
	"MUNICIPALITY" VARCHAR2(100), 
	"POSTALCODE" VARCHAR2(10), 
	"LATITUDE" NUMBER, 
	"LONGITUDE" NUMBER, 
	"CREATED_ON" DATE, 
	"CREATED_BY" VARCHAR2(100), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(100), 
	"SITE_ID" NUMBER(10,0), 
	"REGION_CODE" VARCHAR2(10), 
	 CONSTRAINT "GEOLOCATIONID" PRIMARY KEY ("GEOLOCATIONID") ENABLE
   );

CREATE TABLE  "LOCATIONNAMES" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"LOCATION_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"LANG" VARCHAR2(2) NOT NULL ENABLE, 
	"REGION_NAME" VARCHAR2(200), 
	"LOCATION_NAME" VARCHAR2(200), 
	"SITE_LANG" NUMBER(1,0), 
	 CONSTRAINT "LOCATIONNAMES_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "COUNTRY_LOCATION_FK" FOREIGN KEY ("LOCATION_ID")
	  REFERENCES  "COUNTRYLOCATIONS" ("ID") ENABLE
   );

CREATE TABLE  "LOOKUP_VALUES" 
   (	"LOOKUP_ID" NUMBER NOT NULL ENABLE, 
	"LOOKUP_NAME" VARCHAR2(50) NOT NULL ENABLE, 
	"SITE_ID" NUMBER NOT NULL ENABLE, 
	"LOOKUP_DESCRIPTION" VARCHAR2(200), 
	"CREATED_BY" VARCHAR2(200) DEFAULT 'SYSTEM' NOT NULL ENABLE, 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATE_ON" DATE, 
	"UPDATED_BY" VARCHAR2(200), 
	"CREATED_ON" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"LANG" VARCHAR2(2), 
	"VALUE_CODE" VARCHAR2(50), 
	"SORT_CODE" VARCHAR2(50), 
	 CONSTRAINT "ID_LOOKUP_VALUES" PRIMARY KEY ("LOOKUP_ID") ENABLE, 
	 CONSTRAINT "FK_LOOKUP_VALUES_SITES_1" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ON DELETE SET NULL ENABLE
   );

CREATE TABLE  "LOSTCANDIDATES" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(100), 
	"REASON" VARCHAR2(4), 
	"REASON_COMMENTS" VARCHAR2(100), 
	"CREATED_ON" DATE, 
	"CREATED_BY" VARCHAR2(50), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(50), 
	"UPDATED_ON" DATE, 
	"UPDATED_BY" VARCHAR2(50), 
	 CONSTRAINT "LOSTCANDIDATES_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "LOSTCANDIDATES_SITEID_FK" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE
   );

CREATE TABLE  "MANPOWER_REG_DATA" 
   (	"FIRSTNAME" VARCHAR2(100), 
	"MIDDLENAME" VARCHAR2(100), 
	"LASTNAME" VARCHAR2(100), 
	"DATEOFBIRTH" VARCHAR2(100), 
	"EMAIL" VARCHAR2(100), 
	"STREET" VARCHAR2(200), 
	"CITY" VARCHAR2(100), 
	"STATE" VARCHAR2(100), 
	"POSTCODE" VARCHAR2(100), 
	"PRIMARYPHONENUMBER" VARCHAR2(100), 
	"SECONDARYPHONENUMBER" VARCHAR2(100), 
	"PRIMARYPHONETYPE" VARCHAR2(100), 
	"SECONDARYPHONETYPE" VARCHAR2(100), 
	"CVNAME" VARCHAR2(100)
   );

CREATE TABLE  "NATIONALITY_MAPPING" 
   (	"NATIONALITY_CODE" VARCHAR2(50) NOT NULL ENABLE, 
	"COUNTRY" VARCHAR2(50), 
	"ISO_COUNTRY_CODE" VARCHAR2(3)
   );

CREATE TABLE  "OTHER_CANDIDATE_DETAILS" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"MARKETING_QUESTION_CODE" VARCHAR2(50) NOT NULL ENABLE, 
	"MARKETING_QUESTION_ANSWER" VARCHAR2(512), 
	"CANDIDATE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CREATED_ON" DATE, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	 CONSTRAINT "PK_OTHER_CANDIDATE_DETAILS" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "FK_OCD_BY_SITE" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE, 
	 CONSTRAINT "FK_OCD_BY_CANDIDATE" FOREIGN KEY ("CANDIDATE_ID")
	  REFERENCES  "CANDIDATES" ("ID") ENABLE
   );

CREATE TABLE  "USERS" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0), 
	"EMAIL" VARCHAR2(100), 
	"PASSWORD" VARCHAR2(20), 
	"PASSWORDHINTQUESTION" VARCHAR2(200), 
	"PASSWORDHINTANSWER" VARCHAR2(200), 
	"USERAPPLICATIONLANGUAGE" CHAR(3), 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	"USERROLE_ID" NUMBER(10,0), 
	"FIRSTNAME" VARCHAR2(50), 
	"MIDDLENAME" VARCHAR2(50), 
	"LASTNAME" VARCHAR2(50), 
	"NATIONALNUMBER" VARCHAR2(50), 
	 CONSTRAINT "USERS_ID_PK_" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "USERS_U" UNIQUE ("SITE_ID", "USERROLE_ID", "EMAIL") ENABLE, 
	 CONSTRAINT "SITE_ID_FKSITES" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE, 
	 CONSTRAINT "USERROLE_ID_FKROLES" FOREIGN KEY ("USERROLE_ID")
	  REFERENCES  "USERROLES" ("ID") ENABLE
   );

CREATE TABLE  "PERSONS" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"FIRSTNAME" VARCHAR2(50) NOT NULL ENABLE, 
	"MIDDLENAME" VARCHAR2(50), 
	"LASTNAME" VARCHAR2(50) NOT NULL ENABLE, 
	"NATIONALNUMBER" VARCHAR2(50), 
	"BIRTHDATE" DATE, 
	"BIRTHPLACE" VARCHAR2(50), 
	"GENDER" VARCHAR2(50), 
	"NATIONALITY" VARCHAR2(50), 
	"MARITIALSTATUS" CHAR(1), 
	"USER_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	 CONSTRAINT "PERSON_ID_PK_1_1" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "PERSON_SITE_ID_FK_1_1" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE, 
	 CONSTRAINT "PERSON_USER_ID_FK_1_1" FOREIGN KEY ("USER_ID")
	  REFERENCES  "USERS" ("ID") DISABLE
   );

CREATE TABLE  "PHONES" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"PHONETYPE" VARCHAR2(10) NOT NULL ENABLE, 
	"PHONENUMBER" VARCHAR2(50), 
	"PRIMARY" VARCHAR2(10), 
	"CANDIDATE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	 CONSTRAINT "PHONES_ID_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "PHONES_SITEID_FK" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE, 
	 CONSTRAINT "PHONES_CANDID_FK" FOREIGN KEY ("CANDIDATE_ID")
	  REFERENCES  "CANDIDATES" ("ID") ON DELETE CASCADE ENABLE
   );

CREATE TABLE  "PLAN_TABLE" 
   (	"STATEMENT_ID" VARCHAR2(30), 
	"TIMESTAMP" DATE, 
	"REMARKS" VARCHAR2(80), 
	"OPERATION" VARCHAR2(30), 
	"OPTIONS" VARCHAR2(255), 
	"OBJECT_NODE" VARCHAR2(128), 
	"OBJECT_OWNER" VARCHAR2(30), 
	"OBJECT_NAME" VARCHAR2(30), 
	"OBJECT_INSTANCE" NUMBER(*,0), 
	"OBJECT_TYPE" VARCHAR2(30), 
	"OPTIMIZER" VARCHAR2(255), 
	"SEARCH_COLUMNS" NUMBER, 
	"ID" NUMBER(*,0), 
	"PARENT_ID" NUMBER(*,0), 
	"POSITION" NUMBER(*,0), 
	"COST" NUMBER(*,0), 
	"CARDINALITY" NUMBER(*,0), 
	"BYTES" NUMBER(*,0), 
	"OTHER_TAG" VARCHAR2(255), 
	"PARTITION_START" VARCHAR2(255), 
	"PARTITION_STOP" VARCHAR2(255), 
	"PARTITION_ID" NUMBER(*,0), 
	"OTHER" LONG, 
	"DISTRIBUTION" VARCHAR2(30), 
	"CPU_COST" NUMBER(*,0), 
	"IO_COST" NUMBER(*,0), 
	"TEMP_SPACE" NUMBER(*,0)
   );

CREATE TABLE  "POSTAL_CODES" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"COUNTRYCODE" VARCHAR2(4) NOT NULL ENABLE, 
	"POSTALCODE" VARCHAR2(10) NOT NULL ENABLE, 
	"CITY" VARCHAR2(100) NOT NULL ENABLE, 
	"STREETNAME" VARCHAR2(200) NOT NULL ENABLE, 
	"STREETNUMBER" VARCHAR2(10), 
	"REMARKS" VARCHAR2(200), 
	"CREATED_ON" DATE, 
	"CREATED_BY" VARCHAR2(50), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(50), 
	"UPDATED_ON" DATE, 
	"UPDATED_BY" VARCHAR2(50), 
	"STATE" VARCHAR2(100), 
	 CONSTRAINT "POSTAL_CODES_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "POSTAL_CODES_UNIQUE" UNIQUE ("COUNTRYCODE", "POSTALCODE") ENABLE
   );

CREATE TABLE  "POSTAL_CODE_CAMPUS" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"COUNTRYCODE" VARCHAR2(4) NOT NULL ENABLE, 
	"POSTALCODE" VARCHAR2(10) NOT NULL ENABLE, 
	"LANG" VARCHAR2(4), 
	"CITY" VARCHAR2(100) NOT NULL ENABLE, 
	"STATE" VARCHAR2(200) NOT NULL ENABLE, 
	"REMARKS" VARCHAR2(200), 
	"CREATED_ON" DATE, 
	"CREATED_BY" VARCHAR2(50), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(50), 
	"UPDATED_ON" DATE, 
	"UPDATED_BY" VARCHAR2(50), 
	 CONSTRAINT "POSTAL_CODES_CAMP_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "POSTAL_CODES_CAMP_UNIQUE" UNIQUE ("CITY", "STATE", "LANG", "POSTALCODE", "COUNTRYCODE") ENABLE
   );

CREATE TABLE  "REGIONS" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"LANG" VARCHAR2(10) NOT NULL ENABLE, 
	"COUNTRY_CODE" VARCHAR2(10) NOT NULL ENABLE, 
	"REGION_CODE" VARCHAR2(30) NOT NULL ENABLE, 
	"REGION_NAME" VARCHAR2(200) NOT NULL ENABLE, 
	"PREFERED_LOCATION" VARCHAR2(100), 
	"LOCATION_CODE" VARCHAR2(20), 
	"LONGITUDE" NUMBER, 
	"LATITUDE" NUMBER, 
	"CREATED_ON" DATE, 
	"CREATED_BY" VARCHAR2(50), 
	"UPDATE_ON" DATE, 
	"UPDATED_BY" VARCHAR2(50), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(50), 
	"INTEGRATION_LOC_CODE" VARCHAR2(10), 
	"INTEGRATION_REG_CODE" VARCHAR2(10), 
	 CONSTRAINT "REGION_PK" PRIMARY KEY ("ID") ENABLE
   );

CREATE TABLE  "REQUIREDSKILLS" 
   (	"REQUIREDSKILLID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SKILLNAME" VARCHAR2(25) NOT NULL ENABLE, 
	"SKILLDESCRIPTION" VARCHAR2(100), 
	"CREATED_ON" DATE DEFAULT SYSDATE NOT NULL ENABLE, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	"ADVERTISEMENT_ID" NUMBER(10,0) NOT NULL ENABLE, 
	 CONSTRAINT "REQUIREDSKILLS_ID_PK_1_1" PRIMARY KEY ("REQUIREDSKILLID") ENABLE, 
	 CONSTRAINT "REQUIREDSKILL_ADVER_FK_1_1" FOREIGN KEY ("ADVERTISEMENT_ID")
	  REFERENCES  "ADVERTISEMENTS" ("ADVERTISEMENTID") ON DELETE CASCADE ENABLE, 
	 CONSTRAINT "REQUI_SITE_FK_ID_1" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ON DELETE CASCADE ENABLE
   );

CREATE TABLE  "STEERING_QUESTIONS" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"QUESTION" VARCHAR2(500) NOT NULL ENABLE, 
	"ANSWER1" VARCHAR2(25) NOT NULL ENABLE, 
	"ANSWER2" VARCHAR2(25) NOT NULL ENABLE, 
	"DECISION1" VARCHAR2(1), 
	"DECISION2" VARCHAR2(1), 
	"LANG" VARCHAR2(4) NOT NULL ENABLE, 
	"CREATED_ON" DATE DEFAULT SYSDATE, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATED_ON" DATE, 
	"UPDATED_BY" VARCHAR2(200), 
	"QUESTIONID" NUMBER(10,0), 
	"QUESTIONTYPE" VARCHAR2(4) NOT NULL ENABLE, 
	 CONSTRAINT "STEERING_QUESTIONS_ID_PK" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "STEERING_QUESTIONS_SITEID_FK" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE
   );

CREATE TABLE  "TEMP_THA_RECRUITERS" 
   (	"NAME" VARCHAR2(100), 
	"ADDRESS1" VARCHAR2(100), 
	"CITY" VARCHAR2(100), 
	"BRANCH_ID" VARCHAR2(100), 
	"BRANCH_NAME" VARCHAR2(100), 
	"EMAIL" VARCHAR2(100)
   );

CREATE TABLE  "TMP_RECRUITERS" 
   (	"ADVERTCONTACTID" NUMBER(10,0), 
	"SITE_ID" NUMBER(10,0), 
	"NAME" VARCHAR2(100), 
	"ADDRESS1" VARCHAR2(100), 
	"ADDRESS2" VARCHAR2(100), 
	"POBOX" VARCHAR2(100), 
	"CITY" VARCHAR2(35), 
	"STATE" VARCHAR2(25), 
	"POSTALCODE" CHAR(15), 
	"COUNTRY" VARCHAR2(25), 
	"BRANCH_ID" NUMBER(10,0), 
	"ADVERTISEMENTID" NUMBER(10,0), 
	"CREATED_ON" DATE, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	"EXTERNALID" VARCHAR2(32), 
	"PHONENUMBER" VARCHAR2(50)
   );

CREATE TABLE  "TMP_REGIONS" 
   (	"LANGUAGE_CODE" VARCHAR2(10), 
	"REGION_CODE" VARCHAR2(10), 
	"REGION_NAME" VARCHAR2(50), 
	"LOCATION_CODE" VARCHAR2(10), 
	"LOCATION_NAME" VARCHAR2(100), 
	"LONGITUDE" NUMBER(10,6), 
	"LATITUDE" NUMBER(10,6), 
	"COUNTRY" VARCHAR2(50)
   )
/
CREATE TABLE  "T_IDENTITY" 
   (	"IDENTITY_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"IDENTITY_KEY" VARCHAR2(128) NOT NULL ENABLE, 
	"IDENTITY_NEXT_VALUE" NUMBER(19,0) DEFAULT 1 NOT NULL ENABLE, 
	"IDENTITY_INCREMENT" NUMBER(10,0) DEFAULT 1 NOT NULL ENABLE, 
	"CACHE_SIZE" NUMBER(10,0) DEFAULT 20 NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(255), 
	 CONSTRAINT "PK_T_IDENTITY" PRIMARY KEY ("IDENTITY_ID") ENABLE
   )
/
CREATE TABLE  "USERLOGINHISTORIES" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"SITE_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"LOGINDATE" DATE NOT NULL ENABLE, 
	"SUCCESS" CHAR(1) NOT NULL ENABLE, 
	"USER_ID" NUMBER(10,0) NOT NULL ENABLE, 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200) DEFAULT sysdate, 
	 CONSTRAINT "HISTORIES_ID_PK_1_1" PRIMARY KEY ("ID") ENABLE, 
	 CONSTRAINT "HISTORIES_SITE_ID_FK_1_1" FOREIGN KEY ("SITE_ID")
	  REFERENCES  "SITES" ("ID") ENABLE, 
	 CONSTRAINT "HISTORIES_USER_ID_FK_1_1" FOREIGN KEY ("USER_ID")
	  REFERENCES  "USERS" ("ID") ENABLE
   )
/
CREATE TABLE  "USERROLES" 
   (	"ID" NUMBER(10,0) NOT NULL ENABLE, 
	"TYPE" CHAR(4), 
	"CREATED_ON" DATE DEFAULT sysdate, 
	"CREATED_BY" VARCHAR2(200), 
	"CHANGED_ON" DATE, 
	"CHANGED_BY" VARCHAR2(200), 
	"UPDATEDON" DATE, 
	"UPDATEDBY" VARCHAR2(200), 
	 CONSTRAINT "USERROLES_ID_PK" PRIMARY KEY ("ID") ENABLE
   )
/

Rem No function found to generate DDL.

CREATE UNIQUE INDEX  "ADDRESSES" ON  "ADDRESSES" ("ID")
/
CREATE INDEX  "ADVERTISEMENTS_XCANSKILLS" ON  "ADVERTISEMENTS" ("CANDIDATESKILLS") 
   INDEXTYPE IS "CTXSYS"."CONTEXT"
/
CREATE INDEX  "ADVERTISEMENTS_XCPROFILE" ON  "ADVERTISEMENTS" ("CANDIDATEPROFILE") 
   INDEXTYPE IS "CTXSYS"."CONTEXT"
/
CREATE INDEX  "ADVERTISEMENTS_XINDUS" ON  "ADVERTISEMENTS" ("INDUSTRYSECTOR") 
   INDEXTYPE IS "CTXSYS"."CONTEXT"
/
CREATE INDEX  "ADVERTISEMENTS_XJOBDSC" ON  "ADVERTISEMENTS" ("JOBDESCRIPTION") 
   INDEXTYPE IS "CTXSYS"."CONTEXT" PARAMETERS ('DATASTORE     ADVERTISEMENTS_XJOBDSC_DATASTO
  FILTER        ADVERTISEMENTS_XJOBDSC_FILTER
  LEXER         ADVERTISEMENTS_XJOBDSC_LEXER
  SECTION GROUP ADVERTISEMENTS_XJOBDSC_SECTION
  STOPLIST      ADVERTISEMENTS_XJOBDSC_STOPLIS
  STORAGE       ADVERTISEMENTS_XJOBDSC_STORAGE
  WORDLIST      ADVERTISEMENTS_XJOBDSC_WORDLIS
  MEMORY 50M')
/
CREATE INDEX  "ADVERTISEMENTS_XJOBTITLE" ON  "ADVERTISEMENTS" ("JOBTITLE") 
   INDEXTYPE IS "CTXSYS"."CONTEXT"
/
CREATE INDEX  "ADVERTISEMENTS_XLOCATION" ON  "ADVERTISEMENTS" ("LOCATION") 
   INDEXTYPE IS "CTXSYS"."CONTEXT"
/
CREATE UNIQUE INDEX  "ADVERTISEMENT_ID_PK" ON  "ADVERTISEMENTS" ("ADVERTISEMENTID")
/
CREATE UNIQUE INDEX  "ADVERTPUB_ADVERTPUBID_PK" ON  "ADVERTISEMENTPUBLICATIONS" ("ADVERTPUBID")
/
CREATE UNIQUE INDEX  "BRANCHES_ID_PK_1_1" ON  "BRANCHES" ("ID")
/
CREATE UNIQUE INDEX  "CANDIDATEPREFERENCES_ID_PK" ON  "CANDIDATEPREFERENCES" ("ID")
/
CREATE UNIQUE INDEX  "CANDIDATEREFERENCES_PK" ON  "CANDIDATEREFERENCES" ("ID")
/
CREATE UNIQUE INDEX  "CANDIDATESKILLS_ID_PK" ON  "CANDIDATESKILLS" ("ID")
/
CREATE UNIQUE INDEX  "CANDIDATE_ID_PK_1_1" ON  "CANDIDATES" ("ID")
/
CREATE UNIQUE INDEX  "CAREERHARMONY_ID_PK_1_1" ON  "CAREERHARMONY" ("ID")
/
CREATE UNIQUE INDEX  "CONF_PK" ON  "CONFIGURATION" ("ID")
/
CREATE UNIQUE INDEX  "CONSENT_ID_PK_1" ON  "CONSENT" ("ID")
/
CREATE UNIQUE INDEX  "CONTACTS_ID_PK" ON  "ADVERTISEMENTCONTACTS" ("ADVERTCONTACTID")
/
CREATE UNIQUE INDEX  "COUNTRY_LOCATIONS" ON  "COUNTRYLOCATIONS" ("ID")
/
CREATE UNIQUE INDEX  "DEGREE_PK" ON  "EDUCATIONDEGREES" ("ID")
/
CREATE UNIQUE INDEX  "DEGREE_UNIQUE" ON  "EDUCATIONDEGREES" ("COUNTRY", "LANG", "DEGREE_CODE")
/
CREATE INDEX  "DR$ADVERTISEMENTS_XCANSKILLS$X" ON  "DR$ADVERTISEMENTS_XCANSKILLS$I" ("TOKEN_TEXT", "TOKEN_TYPE", "TOKEN_FIRST", "TOKEN_LAST", "TOKEN_COUNT")
/
CREATE INDEX  "DR$ADVERTISEMENTS_XCPROFILE$X" ON  "DR$ADVERTISEMENTS_XCPROFILE$I" ("TOKEN_TEXT", "TOKEN_TYPE", "TOKEN_FIRST", "TOKEN_LAST", "TOKEN_COUNT")
/
CREATE INDEX  "DR$ADVERTISEMENTS_XINDUS$X" ON  "DR$ADVERTISEMENTS_XINDUS$I" ("TOKEN_TEXT", "TOKEN_TYPE", "TOKEN_FIRST", "TOKEN_LAST", "TOKEN_COUNT")
/
CREATE INDEX  "DR$ADVERTISEMENTS_XJOBDSC$X" ON  "DR$ADVERTISEMENTS_XJOBDSC$I" ("TOKEN_TEXT", "TOKEN_TYPE", "TOKEN_FIRST", "TOKEN_LAST", "TOKEN_COUNT")
/
CREATE INDEX  "DR$ADVERTISEMENTS_XJOBTITLE$X" ON  "DR$ADVERTISEMENTS_XJOBTITLE$I" ("TOKEN_TEXT", "TOKEN_TYPE", "TOKEN_FIRST", "TOKEN_LAST", "TOKEN_COUNT")
/
CREATE INDEX  "DR$ADVERTISEMENTS_XLOCATION$X" ON  "DR$ADVERTISEMENTS_XLOCATION$I" ("TOKEN_TEXT", "TOKEN_TYPE", "TOKEN_FIRST", "TOKEN_LAST", "TOKEN_COUNT")
/
CREATE INDEX  "DR$GEOLOCATION_XMUNICIPALITY$X" ON  "DR$GEOLOCATION_XMUNICIPALITY$I" ("TOKEN_TEXT", "TOKEN_TYPE", "TOKEN_FIRST", "TOKEN_LAST", "TOKEN_COUNT")
/
CREATE INDEX  "DR$REGIONS_XPREFERREDLOC$X" ON  "DR$REGIONS_XPREFERREDLOC$I" ("TOKEN_TEXT", "TOKEN_TYPE", "TOKEN_FIRST", "TOKEN_LAST", "TOKEN_COUNT")
/
CREATE INDEX  "DR$XLOCATIONNAMES$X" ON  "DR$XLOCATIONNAMES$I" ("TOKEN_TEXT", "TOKEN_TYPE", "TOKEN_FIRST", "TOKEN_LAST", "TOKEN_COUNT")
/
CREATE UNIQUE INDEX  "EDUCATION_ID_PK_1" ON  "CANDIDATEEDUCATIONS" ("ID")
/
CREATE UNIQUE INDEX  "EMAILS_PK" ON  "EMAILS" ("ID")
/
CREATE UNIQUE INDEX  "EMAIL_CONTROL_UNIQ_SITEID" ON  "EMAIL_CONTROL" ("SITE_ID")
/
CREATE UNIQUE INDEX  "EMAIL_UNICO_USERS" ON  "SITES" ("SITENAME")
/
CREATE INDEX  "EXPIRATION_DATE_IDX" ON  "ADVERTISEMENTS" ("EXPIRATIONDATE")
/
CREATE UNIQUE INDEX  "GEOLOCATIONID" ON  "GEOLOCATION" ("GEOLOCATIONID")
/
CREATE INDEX  "GEOLOCATION_XMUNICIPALITY" ON  "GEOLOCATION" ("MUNICIPALITY") 
   INDEXTYPE IS "CTXSYS"."CONTEXT"
/
CREATE UNIQUE INDEX  "HISTORIES_ID_PK_1_1" ON  "USERLOGINHISTORIES" ("ID")
/
CREATE UNIQUE INDEX  "ID_LOOKUP_VALUES" ON  "LOOKUP_VALUES" ("LOOKUP_ID")
/
CREATE UNIQUE INDEX  "JOBHISTO_ID_PK" ON  "CANDIDATEJOBHISTORIES" ("ID")
/
CREATE INDEX  "LANGUAGE_IDX" ON  "ADVERTISEMENTS" ("LANGUAGE")
/
CREATE UNIQUE INDEX  "LOCATIONNAMES_PK" ON  "LOCATIONNAMES" ("ID")
/
CREATE UNIQUE INDEX  "LOSTCANDIDATES_PK" ON  "LOSTCANDIDATES" ("ID")
/
CREATE UNIQUE INDEX  "PERSON_ID_PK_1_1" ON  "PERSONS" ("ID")
/
CREATE UNIQUE INDEX  "PHONES_ID_PK" ON  "PHONES" ("ID")
/
CREATE UNIQUE INDEX  "PK_OTHER_CANDIDATE_DETAILS" ON  "OTHER_CANDIDATE_DETAILS" ("ID")
/
CREATE UNIQUE INDEX  "PK_T_IDENTITY" ON  "T_IDENTITY" ("IDENTITY_ID")
/
CREATE UNIQUE INDEX  "POSTAL_CODES_CAMP_PK" ON  "POSTAL_CODE_CAMPUS" ("ID")
/
CREATE UNIQUE INDEX  "POSTAL_CODES_CAMP_UNIQUE" ON  "POSTAL_CODE_CAMPUS" ("CITY", "STATE", "LANG", "POSTALCODE", "COUNTRYCODE")
/
CREATE UNIQUE INDEX  "POSTAL_CODES_PK" ON  "POSTAL_CODES" ("ID")
/
CREATE UNIQUE INDEX  "POSTAL_CODES_UNIQUE" ON  "POSTAL_CODES" ("COUNTRYCODE", "POSTALCODE")
/
CREATE INDEX  "PUBLICATION_DATE_IDX" ON  "ADVERTISEMENTS" ("PUBLICATIONDATE")
/
CREATE INDEX  "REGIONS_XPREFERREDLOC" ON  "REGIONS" ("PREFERED_LOCATION") 
   INDEXTYPE IS "CTXSYS"."CONTEXT"
/
CREATE UNIQUE INDEX  "REGION_PK" ON  "REGIONS" ("ID")
/
CREATE UNIQUE INDEX  "REQUIREDSKILLS_ID_PK_1_1" ON  "REQUIREDSKILLS" ("REQUIREDSKILLID")
/
CREATE UNIQUE INDEX  "SAVEJOBS_ID_PK" ON  "CANDIDATESAVEJOBS" ("ID")
/
CREATE UNIQUE INDEX  "SITECODIGO_UNICO" ON  "SITES" ("SITECODE")
/
CREATE UNIQUE INDEX  "SITES_ID_PK" ON  "SITES" ("ID")
/
CREATE INDEX  "SITE_ID_IDX" ON  "ADVERTISEMENTS" ("SITE_ID")
/
CREATE UNIQUE INDEX  "SKILL_ID_PK_1_1" ON  "SKILLS" ("ID")
/
CREATE UNIQUE INDEX  "STEERING_QUESTIONS_ID_PK" ON  "STEERING_QUESTIONS" ("ID")
/
CREATE UNIQUE INDEX  "SYS_IL0000014846C00006$$" ON  "DR$ADVERTISEMENTS_XLOCATION$I" (
/
CREATE UNIQUE INDEX  "SYS_IL0000014851C00002$$" ON  "DR$ADVERTISEMENTS_XLOCATION$R" (
/
CREATE UNIQUE INDEX  "SYS_IL0000014858C00006$$" ON  "DR$ADVERTISEMENTS_XINDUS$I" (
/
CREATE UNIQUE INDEX  "SYS_IL0000014863C00002$$" ON  "DR$ADVERTISEMENTS_XINDUS$R" (
/
CREATE UNIQUE INDEX  "SYS_IL0000014870C00006$$" ON  "DR$GEOLOCATION_XMUNICIPALITY$I" (
/
CREATE UNIQUE INDEX  "SYS_IL0000014875C00002$$" ON  "DR$GEOLOCATION_XMUNICIPALITY$R" (
/
CREATE UNIQUE INDEX  "SYS_IL0000014882C00006$$" ON  "DR$ADVERTISEMENTS_XCANSKILLS$I" (
/
CREATE UNIQUE INDEX  "SYS_IL0000014887C00002$$" ON  "DR$ADVERTISEMENTS_XCANSKILLS$R" (
/
CREATE UNIQUE INDEX  "SYS_IL0000014894C00006$$" ON  "DR$ADVERTISEMENTS_XJOBTITLE$I" (
/
CREATE UNIQUE INDEX  "SYS_IL0000014899C00002$$" ON  "DR$ADVERTISEMENTS_XJOBTITLE$R" (
/
CREATE UNIQUE INDEX  "SYS_IL0000014906C00006$$" ON  "DR$ADVERTISEMENTS_XJOBDSC$I" (
/
CREATE UNIQUE INDEX  "SYS_IL0000014911C00002$$" ON  "DR$ADVERTISEMENTS_XJOBDSC$R" (
/
CREATE UNIQUE INDEX  "SYS_IL0000014918C00006$$" ON  "DR$REGIONS_XPREFERREDLOC$I" (
/
CREATE UNIQUE INDEX  "SYS_IL0000014923C00002$$" ON  "DR$REGIONS_XPREFERREDLOC$R" (
/
CREATE UNIQUE INDEX  "SYS_IL0000014930C00006$$" ON  "DR$XLOCATIONNAMES$I" (
/
CREATE UNIQUE INDEX  "SYS_IL0000014935C00002$$" ON  "DR$XLOCATIONNAMES$R" (
/
CREATE UNIQUE INDEX  "SYS_IL0000014942C00006$$" ON  "DR$ADVERTISEMENTS_XCPROFILE$I" (
/
CREATE UNIQUE INDEX  "SYS_IL0000014947C00002$$" ON  "DR$ADVERTISEMENTS_XCPROFILE$R" (
/
CREATE UNIQUE INDEX  "SYS_IOT_TOP_14849" ON  "DR$ADVERTISEMENTS_XLOCATION$K" ("TEXTKEY")
/
CREATE UNIQUE INDEX  "SYS_IOT_TOP_14854" ON  "DR$ADVERTISEMENTS_XLOCATION$N" ("NLT_DOCID")
/
CREATE UNIQUE INDEX  "SYS_IOT_TOP_14861" ON  "DR$ADVERTISEMENTS_XINDUS$K" ("TEXTKEY")
/
CREATE UNIQUE INDEX  "SYS_IOT_TOP_14866" ON  "DR$ADVERTISEMENTS_XINDUS$N" ("NLT_DOCID")
/
CREATE UNIQUE INDEX  "SYS_IOT_TOP_14873" ON  "DR$GEOLOCATION_XMUNICIPALITY$K" ("TEXTKEY")
/
CREATE UNIQUE INDEX  "SYS_IOT_TOP_14878" ON  "DR$GEOLOCATION_XMUNICIPALITY$N" ("NLT_DOCID")
/
CREATE UNIQUE INDEX  "SYS_IOT_TOP_14885" ON  "DR$ADVERTISEMENTS_XCANSKILLS$K" ("TEXTKEY")
/
CREATE UNIQUE INDEX  "SYS_IOT_TOP_14890" ON  "DR$ADVERTISEMENTS_XCANSKILLS$N" ("NLT_DOCID")
/
CREATE UNIQUE INDEX  "SYS_IOT_TOP_14897" ON  "DR$ADVERTISEMENTS_XJOBTITLE$K" ("TEXTKEY")
/
CREATE UNIQUE INDEX  "SYS_IOT_TOP_14902" ON  "DR$ADVERTISEMENTS_XJOBTITLE$N" ("NLT_DOCID")
/
CREATE UNIQUE INDEX  "SYS_IOT_TOP_14909" ON  "DR$ADVERTISEMENTS_XJOBDSC$K" ("TEXTKEY")
/
CREATE UNIQUE INDEX  "SYS_IOT_TOP_14914" ON  "DR$ADVERTISEMENTS_XJOBDSC$N" ("NLT_DOCID")
/
CREATE UNIQUE INDEX  "SYS_IOT_TOP_14921" ON  "DR$REGIONS_XPREFERREDLOC$K" ("TEXTKEY")
/
CREATE UNIQUE INDEX  "SYS_IOT_TOP_14926" ON  "DR$REGIONS_XPREFERREDLOC$N" ("NLT_DOCID")
/
CREATE UNIQUE INDEX  "SYS_IOT_TOP_14933" ON  "DR$XLOCATIONNAMES$K" ("TEXTKEY")
/
CREATE UNIQUE INDEX  "SYS_IOT_TOP_14938" ON  "DR$XLOCATIONNAMES$N" ("NLT_DOCID")
/
CREATE UNIQUE INDEX  "SYS_IOT_TOP_14945" ON  "DR$ADVERTISEMENTS_XCPROFILE$K" ("TEXTKEY")
/
CREATE UNIQUE INDEX  "SYS_IOT_TOP_14950" ON  "DR$ADVERTISEMENTS_XCPROFILE$N" ("NLT_DOCID")
/
CREATE UNIQUE INDEX  "USERROLES_ID_PK" ON  "USERROLES" ("ID")
/
CREATE UNIQUE INDEX  "USERS_ID_PK_" ON  "USERS" ("ID")
/
CREATE UNIQUE INDEX  "USERS_U" ON  "USERS" ("SITE_ID", "USERROLE_ID", "EMAIL")
/
CREATE INDEX  "XLOCATIONNAMES" ON  "LOCATIONNAMES" ("LOCATION_NAME") 
   INDEXTYPE IS "CTXSYS"."CONTEXT"
/

CREATE OR REPLACE PACKAGE  "DEMO_MAIL" IS

  ----------------------- Customizable Section -----------------------

  -- Customize the SMTP host, port and your domain name below.
  -- smtp_host   VARCHAR2(256) := '10.98.104.29';
  smtp_host   VARCHAR2(256) := 'secondary.manpower.com';
  smtp_port   PLS_INTEGER   := 25;
  smtp_domain VARCHAR2(256) := 'manpower.com';

  -- Customize the signature that will appear in the email's MIME header.
  -- Useful for versioning.
  MAILER_ID   CONSTANT VARCHAR2(256) := 'Mailer by Oracle UTL_SMTP';

  --------------------- End Customizable Section ---------------------

  -- A unique string that demarcates boundaries of parts in a multi-part email
  -- The string should not appear inside the body of any part of the email.
  -- Customize this if needed or generate this randomly dynamically.
  BOUNDARY        CONSTANT VARCHAR2(256) := '-----7D81B75CCC90D2974F7A1CBD';

  FIRST_BOUNDARY  CONSTANT VARCHAR2(256) := '--' || BOUNDARY || utl_tcp.CRLF;
  LAST_BOUNDARY   CONSTANT VARCHAR2(256) := '--' || BOUNDARY || '--' ||
                                              utl_tcp.CRLF;

  -- A MIME type that denotes multi-part email (MIME) messages.
  MULTIPART_MIME_TYPE CONSTANT VARCHAR2(256) := 'multipart/mixed; boundary="'||
                                                  BOUNDARY || '"';
  MAX_BASE64_LINE_WIDTH CONSTANT PLS_INTEGER   := 76 / 4 * 3;

  -- A simple email API for sending email in plain text in a single call.
  -- The format of an email address is one of these:
  --   someone@some-domain
  --   "Someone at some domain" <someone@some-domain>
  --   Someone at some domain <someone@some-domain>
  -- The recipients is a list of email addresses  separated by
  -- either a "," or a ";"
  PROCEDURE mail(sender     IN VARCHAR2,
   recipients IN VARCHAR2,
   subject    IN VARCHAR2,
   message    IN VARCHAR2);

  -- Extended email API to send email in HTML or plain text with no size limit.
  -- First, begin the email by begin_mail(). Then, call write_text() repeatedly
  -- to send email in ASCII piece-by-piece. Or, call write_mb_text() to send
  -- email in non-ASCII or multi-byte character set. End the email with
  -- end_mail().
  FUNCTION begin_mail(sender     IN VARCHAR2,
        recipients IN VARCHAR2,
        subject    IN VARCHAR2,
        mime_type  IN VARCHAR2    DEFAULT 'text/plain',
        priority   IN PLS_INTEGER DEFAULT NULL)
        RETURN utl_smtp.connection;

  -- Write email body in ASCII
  PROCEDURE write_text(conn    IN OUT NOCOPY utl_smtp.connection,
         message IN VARCHAR2);

  -- Write email body in non-ASCII (including multi-byte). The email body
  -- will be sent in the database character set.
  PROCEDURE write_mb_text(conn    IN OUT NOCOPY utl_smtp.connection,
     message IN            VARCHAR2);

  -- Write email body in binary
  PROCEDURE write_raw(conn    IN OUT NOCOPY utl_smtp.connection,
        message IN RAW);

  -- APIs to send email with attachments. Attachments are sent by sending
  -- emails in "multipart/mixed" MIME format. Specify that MIME format when
  -- beginning an email with begin_mail().

  -- Send a single text attachment.
  PROCEDURE attach_text(conn         IN OUT NOCOPY utl_smtp.connection,
   data         IN VARCHAR2,
   mime_type    IN VARCHAR2 DEFAULT 'text/plain',
   inline       IN BOOLEAN  DEFAULT TRUE,
   filename     IN VARCHAR2 DEFAULT NULL,
          last         IN BOOLEAN  DEFAULT FALSE);

  -- Send a binary attachment. The attachment will be encoded in Base-64
  -- encoding format.
  PROCEDURE attach_base64(conn         IN OUT NOCOPY utl_smtp.connection,
     data         IN RAW,
     mime_type    IN VARCHAR2 DEFAULT 'application/octet',
     inline       IN BOOLEAN  DEFAULT TRUE,
     filename     IN VARCHAR2 DEFAULT NULL,
     last         IN BOOLEAN  DEFAULT FALSE);

  -- Send an attachment with no size limit. First, begin the attachment
  -- with begin_attachment(). Then, call write_text repeatedly to send
  -- the attachment piece-by-piece. If the attachment is text-based but
  -- in non-ASCII or multi-byte character set, use write_mb_text() instead.
  -- To send binary attachment, the binary content should first be
  -- encoded in Base-64 encoding format using the demo package for 8i,
  -- or the native one in 9i. End the attachment with end_attachment.
  PROCEDURE begin_attachment(conn         IN OUT NOCOPY utl_smtp.connection,
        mime_type    IN VARCHAR2 DEFAULT 'text/plain',
        inline       IN BOOLEAN  DEFAULT TRUE,
        filename     IN VARCHAR2 DEFAULT NULL,
        transfer_enc IN VARCHAR2 DEFAULT NULL);

  -- End the attachment.
  PROCEDURE end_attachment(conn IN OUT NOCOPY utl_smtp.connection,
      last IN BOOLEAN DEFAULT FALSE);

  -- End the email.
  PROCEDURE end_mail(conn IN OUT NOCOPY utl_smtp.connection);

  -- Extended email API to send multiple emails in a session for better
  -- performance. First, begin an email session with begin_session.
  -- Then, begin each email with a session by calling begin_mail_in_session
  -- instead of begin_mail. End the email with end_mail_in_session instead
  -- of end_mail. End the email session by end_session.
  FUNCTION begin_session RETURN utl_smtp.connection;

  -- Begin an email in a session.
  PROCEDURE begin_mail_in_session(conn       IN OUT NOCOPY utl_smtp.connection,
      sender     IN VARCHAR2,
      recipients IN VARCHAR2,
      subject    IN VARCHAR2,
      mime_type  IN VARCHAR2  DEFAULT 'text/plain',
      priority   IN PLS_INTEGER DEFAULT NULL);

  -- End an email in a session.
  PROCEDURE end_mail_in_session(conn IN OUT NOCOPY utl_smtp.connection);

  -- End an email session.
  PROCEDURE end_session(conn IN OUT NOCOPY utl_smtp.connection);

END;
/
CREATE OR REPLACE PACKAGE BODY  "DEMO_MAIL" IS

  -- Return the next email address in the list of email addresses, separated
  -- by either a "," or a ";".  The format of mailbox may be in one of these:
  --   someone@some-domain
  --   "Someone at some domain" <someone@some-domain>
  --   Someone at some domain <someone@some-domain>
  FUNCTION get_address(addr_list IN OUT VARCHAR2) RETURN VARCHAR2 IS

    addr VARCHAR2(256);
    i    pls_integer;

    FUNCTION lookup_unquoted_char(str  IN VARCHAR2,
      chrs IN VARCHAR2) RETURN pls_integer AS
      c            VARCHAR2(5);
      i            pls_integer;
      len          pls_integer;
      inside_quote BOOLEAN;
    BEGIN
       inside_quote := false;
       i := 1;
       len := length(str);
       WHILE (i <= len) LOOP

  c := substr(str, i, 1);

  IF (inside_quote) THEN
    IF (c = '"') THEN
      inside_quote := false;
    ELSIF (c = '\') THEN
      i := i + 1; -- Skip the quote character
    END IF;
    GOTO next_char;
  END IF;

  IF (c = '"') THEN
    inside_quote := true;
    GOTO next_char;
  END IF;

  IF (instr(chrs, c) >= 1) THEN
     RETURN i;
  END IF;

  <<next_char>>
  i := i + 1;

       END LOOP;

       RETURN 0;

    END;

  BEGIN

    addr_list := ltrim(addr_list);
    i := lookup_unquoted_char(addr_list, ',;');
    IF (i >= 1) THEN
      addr      := substr(addr_list, 1, i - 1);
      addr_list := substr(addr_list, i + 1);
    ELSE
      addr := addr_list;
      addr_list := '';
    END IF;

    i := lookup_unquoted_char(addr, '<');
    IF (i >= 1) THEN
      addr := substr(addr, i + 1);
      i := instr(addr, '>');
      IF (i >= 1) THEN
 addr := substr(addr, 1, i - 1);
      END IF;
    END IF;

    RETURN addr;
  END;

  -- Write a MIME header
  PROCEDURE write_mime_header(conn  IN OUT NOCOPY utl_smtp.connection,
         name  IN VARCHAR2,
         value IN VARCHAR2) IS
  BEGIN
    utl_smtp.write_data(conn, name || ': ' || value || utl_tcp.CRLF);
  END;

  -- Mark a message-part boundary.  Set <last> to TRUE for the last boundary.
  PROCEDURE write_boundary(conn  IN OUT NOCOPY utl_smtp.connection,
      last  IN            BOOLEAN DEFAULT FALSE) AS
  BEGIN
    IF (last) THEN
      utl_smtp.write_data(conn, LAST_BOUNDARY);
    ELSE
      utl_smtp.write_data(conn, FIRST_BOUNDARY);
    END IF;
  END;

  ------------------------------------------------------------------------
  PROCEDURE mail(sender     IN VARCHAR2,
   recipients IN VARCHAR2,
   subject    IN VARCHAR2,
   message    IN VARCHAR2) IS
    conn utl_smtp.connection;
  BEGIN
    conn := begin_mail(sender, recipients, subject);
    write_text(conn, message);
    end_mail(conn);
  END;

  ------------------------------------------------------------------------
  FUNCTION begin_mail(sender     IN VARCHAR2,
        recipients IN VARCHAR2,
        subject    IN VARCHAR2,
        mime_type  IN VARCHAR2    DEFAULT 'text/plain',
        priority   IN PLS_INTEGER DEFAULT NULL)
        RETURN utl_smtp.connection IS
    conn utl_smtp.connection;
  BEGIN
    conn := begin_session;
    begin_mail_in_session(conn, sender, recipients, subject, mime_type,
      priority);
    RETURN conn;
  END;

  ------------------------------------------------------------------------
  PROCEDURE write_text(conn    IN OUT NOCOPY utl_smtp.connection,
         message IN VARCHAR2) IS
  BEGIN
    utl_smtp.write_data(conn, message);
  END;

  ------------------------------------------------------------------------
  PROCEDURE write_mb_text(conn    IN OUT NOCOPY utl_smtp.connection,
     message IN            VARCHAR2) IS
  BEGIN
    utl_smtp.write_raw_data(conn, utl_raw.cast_to_raw(message));
  END;

  ------------------------------------------------------------------------
  PROCEDURE write_raw(conn    IN OUT NOCOPY utl_smtp.connection,
        message IN RAW) IS
  BEGIN
    utl_smtp.write_raw_data(conn, message);
  END;

  ------------------------------------------------------------------------
  PROCEDURE attach_text(conn         IN OUT NOCOPY utl_smtp.connection,
   data         IN VARCHAR2,
   mime_type    IN VARCHAR2 DEFAULT 'text/plain',
   inline       IN BOOLEAN  DEFAULT TRUE,
   filename     IN VARCHAR2 DEFAULT NULL,
          last         IN BOOLEAN  DEFAULT FALSE) IS
  BEGIN
    begin_attachment(conn, mime_type, inline, filename);
    write_text(conn, data);
    end_attachment(conn, last);
  END;

  ------------------------------------------------------------------------
  PROCEDURE attach_base64(conn         IN OUT NOCOPY utl_smtp.connection,
     data         IN RAW,
     mime_type    IN VARCHAR2 DEFAULT 'application/octet',
     inline       IN BOOLEAN  DEFAULT TRUE,
     filename     IN VARCHAR2 DEFAULT NULL,
     last         IN BOOLEAN  DEFAULT FALSE) IS
    i   PLS_INTEGER;
    len PLS_INTEGER;
  BEGIN

    begin_attachment(conn, mime_type, inline, filename, 'base64');

    -- Split the Base64-encoded attachment into multiple lines
    i   := 1;
    len := utl_raw.length(data);
    WHILE (i < len) LOOP
       IF (i + MAX_BASE64_LINE_WIDTH < len) THEN
  utl_smtp.write_raw_data(conn,
     utl_encode.base64_encode(utl_raw.substr(data, i,
     MAX_BASE64_LINE_WIDTH)));
       ELSE
  utl_smtp.write_raw_data(conn,
    utl_encode.base64_encode(utl_raw.substr(data, i)));
       END IF;
       utl_smtp.write_data(conn, utl_tcp.CRLF);
       i := i + MAX_BASE64_LINE_WIDTH;
    END LOOP;

    end_attachment(conn, last);

  END;

  ------------------------------------------------------------------------
  PROCEDURE begin_attachment(conn         IN OUT NOCOPY utl_smtp.connection,
        mime_type    IN VARCHAR2 DEFAULT 'text/plain',
        inline       IN BOOLEAN  DEFAULT TRUE,
        filename     IN VARCHAR2 DEFAULT NULL,
        transfer_enc IN VARCHAR2 DEFAULT NULL) IS
  BEGIN
    write_boundary(conn);
    write_mime_header(conn, 'Content-Type', mime_type);

    IF (filename IS NOT NULL) THEN
       IF (inline) THEN
   write_mime_header(conn, 'Content-Disposition',
     'inline; filename="'||filename||'"');
       ELSE
   write_mime_header(conn, 'Content-Disposition',
     'attachment; filename="'||filename||'"');
       END IF;
    END IF;

    IF (transfer_enc IS NOT NULL) THEN
      write_mime_header(conn, 'Content-Transfer-Encoding', transfer_enc);
    END IF;

    utl_smtp.write_data(conn, utl_tcp.CRLF);
  END;

  ------------------------------------------------------------------------
  PROCEDURE end_attachment(conn IN OUT NOCOPY utl_smtp.connection,
      last IN BOOLEAN DEFAULT FALSE) IS
  BEGIN
    utl_smtp.write_data(conn, utl_tcp.CRLF);
    IF (last) THEN
      write_boundary(conn, last);
    END IF;
  END;

  ------------------------------------------------------------------------
  PROCEDURE end_mail(conn IN OUT NOCOPY utl_smtp.connection) IS
  BEGIN
    end_mail_in_session(conn);
    end_session(conn);
  EXCEPTION
    WHEN OTHERS THEN
      utl_smtp.quit(conn);
  END;

  ------------------------------------------------------------------------
  FUNCTION begin_session RETURN utl_smtp.connection IS
    conn utl_smtp.connection;
  BEGIN
    -- open SMTP connection
    conn := utl_smtp.open_connection(smtp_host, smtp_port);
    utl_smtp.helo(conn, smtp_domain);
    RETURN conn;
  END;

  ------------------------------------------------------------------------
  PROCEDURE begin_mail_in_session(conn       IN OUT NOCOPY utl_smtp.connection,
      sender     IN VARCHAR2,
      recipients IN VARCHAR2,
      subject    IN VARCHAR2,
      mime_type  IN VARCHAR2  DEFAULT 'text/plain',
      priority   IN PLS_INTEGER DEFAULT NULL) IS
    my_recipients VARCHAR2(32767) := recipients;
    my_sender     VARCHAR2(32767) := sender;
  BEGIN

    -- Specify sender's address (our server allows bogus address
    -- as long as it is a full email address (xxx@yyy.com).
    utl_smtp.mail(conn, get_address(my_sender));

    -- Specify recipient(s) of the email.
    WHILE (my_recipients IS NOT NULL) LOOP
      utl_smtp.rcpt(conn, get_address(my_recipients));
    END LOOP;

    -- Start body of email
    utl_smtp.open_data(conn);

    -- Set "From" MIME header
    write_mime_header(conn, 'From', sender);

    -- Set "To" MIME header
    write_mime_header(conn, 'To', recipients);

    -- Set "Subject" MIME header
    write_mime_header(conn, 'Subject', subject);

    -- Set "Content-Type" MIME header
    write_mime_header(conn, 'Content-Type', mime_type);

    -- Set "X-Mailer" MIME header
    write_mime_header(conn, 'X-Mailer', MAILER_ID);

    -- Set priority:
    --   High      Normal       Low
    --   1     2     3     4     5
    IF (priority IS NOT NULL) THEN
      write_mime_header(conn, 'X-Priority', priority);
    END IF;

    -- Send an empty line to denotes end of MIME headers and
    -- beginning of message body.
    utl_smtp.write_data(conn, utl_tcp.CRLF);

    IF (mime_type LIKE 'multipart/mixed%') THEN
      write_text(conn, 'This is a multi-part message in MIME format.' ||
 utl_tcp.crlf);
    END IF;

  END;

  ------------------------------------------------------------------------
  PROCEDURE end_mail_in_session(conn IN OUT NOCOPY utl_smtp.connection) IS
  BEGIN
    utl_smtp.close_data(conn);
  END;

  ------------------------------------------------------------------------
  PROCEDURE end_session(conn IN OUT NOCOPY utl_smtp.connection) IS
  BEGIN
    utl_smtp.quit(conn);
  END;

END;



--Here is some test code using HTML:
/*
declare
  -- Non-scalar parameters require additional processing 
  conn sys.utl_smtp.connection;
  sender_in VARCHAR2(100) := 'scot.armstrong@manpower.com';
  recipients_in VARCHAR2(200) := 'david.poll@manpower.com';
  subject_in VARCHAR2(100) := 'Oracle Email';
  mime_type_in VARCHAR2(100) := 'text/html; charset="ISO-8859-1"';
  priority_in PLS_INTEGER;
  message_in VARCHAR2(4000) := 'I have an email package working.';
  
begin
  -- Call the function
  conn := demo_mail.begin_mail(sender => sender_in,
                               recipients => recipients_in,
                               subject => subject_in,
                               mime_type => mime_type_in,
                               priority => priority_in);
  -- Call the procedure
  demo_mail.write_mb_text(conn => conn,
                          message => message_in);

  demo_mail.write_mb_text(conn => conn,
                          message => '</p>');
                                                    
  demo_mail.write_mb_text(conn => conn,
                          message => '<b>');

  demo_mail.write_mb_text(conn => conn,
                          message => 'bold <br> test');

  demo_mail.write_mb_text(conn => conn,
                          message => '</b>');
                          
  demo_mail.end_mail(conn => conn);                          
end;
*/
/
 CREATE OR REPLACE PACKAGE  "MPNET_EMAIL_DB" is
/*
|| Author: arnold millar
|| Maintained by : arnold millar
||
|| Modification History
|| When         Who       What
|| 08/17/2006   am        add getLookupDescription function
|| 08/24/2006   am        add Split, Dynamic_In functions; modified getLookupDescription
*/
  function getPassword(email_addr varchar2) return candidates%rowtype;
  
  function getContainsClause(column_in varchar2, value_in varchar2, operator_in varchar2) return varchar2;
  
  function getColumnClause(column_in varchar2, value_in varchar2, operator_in varchar2) return varchar2;
  
  function getLiteralString(strValue in varchar2) return varchar2;
  
  function getLookupDescription(valueCode in varchar2, 
                                lookupName in varchar2, 
                                langcode in varchar2, 
                                siteId in number
                                ) return varchar2;
  
  procedure getGeoLocation(jobcountry_in in varchar2, joblocation_in in varchar2, lat_out in out number, lon_out in out number);
  
  procedure writeLog(blurb in varchar2,msg in varchar2);  
                      
  function Split(PC$Chaine IN VARCHAR2, -- input string
                 PN$Pos    IN PLS_INTEGER, -- token number
                 PC$Sep    IN VARCHAR2 DEFAULT ',' -- separator character
                ) return varchar2;            
  
  function Dynamic_In ( PC$list IN VARCHAR2 ) return sys.dbms_debug_vc2coll;
  
end MPNET_EMAIL_DB;
/
CREATE OR REPLACE PACKAGE BODY  "MPNET_EMAIL_DB" is
  /*
    function getPassword(email_addr varchar2) return varchar2 is
    password varchar2(100);
    begin
      select c.password into password from candidates c where upper(c.email) = (select upper(email_addr) from emails where type = 'PASSWORD');
      return password;
    end;
  */
  function getPassword(email_addr varchar2) return candidates%rowtype is
    cand_rec candidates%rowtype;
  
  begin
    select c.firstname, c.password, c.email
      into cand_rec.firstname, cand_rec.password, cand_rec.email
      from candidates c
     where upper(c.email) =
           (select upper(email_addr) from emails where type = 'PASSWORD');
    return cand_rec;
  end;

  function getContainsClause(column_in   varchar2,
                             value_in    varchar2,
                             operator_in varchar2) return varchar2 is
    strClause varchar2(100);
  
  begin
    if operator_in is null then
      strClause := ' CONTAINS(' || column_in || ',''' || value_in ||
                   ''')>0';
    else
      strClause := ' CONTAINS(' || column_in || ',''' || value_in ||
                   ''')>0 ' || operator_in || ' ';
    end if;
    return strClause;
  end;

  function getColumnClause(column_in   varchar2,
                           value_in    varchar2,
                           operator_in varchar2) return varchar2 is
    strClause varchar2(100);
  
  begin
    if operator_in is null then
      strClause := column_in || '=''' || value_in || '';
    else
      strClause := column_in || '=''' || value_in || ''' ' || operator_in;
    end if;
    return strClause;
  end;

  function getLookupDescription(valueCode  varchar2,
                                lookupName varchar2,
                                langcode   varchar2,
                                siteId     number) return varchar2 is

  tempResult varchar2(3000);
  
  begin
      declare
        cursor cur_lookup is
          select lookup_description
            from lookup_values
           where lookup_name = lookupName
             and lang = langcode
             and site_id = siteId
             and value_code in
                 (SELECT *
                    FROM TABLE(CAST(mpnet_email_db.Dynamic_In(valueCode) AS
                                    sys.dbms_debug_vc2coll)));
      begin
        for c in cur_lookup loop
          tempResult := c.lookup_description || ', ' || tempResult;
        end loop;    
        return substr(tempResult,1,length(tempResult)-2);
      end;
    exception
      when no_data_found then
        dbms_output.put_line('getLookupDescription: no lookup_description found...');
        return null;
  end;

  procedure getGeoLocation(jobcountry_in  varchar2,
                           joblocation_in varchar2,
                           lat_out        in out number,
                           lon_out        in out number) is
  
  begin
    select g.latitude, g.longitude
      into lat_out, lon_out
      from geolocation g
     where g.countryname = jobcountry_in
       and contains(g.municipality, joblocation_in) > 0
       and rownum = 1;
  
  exception
    when no_data_found then
      dbms_output.put_line('no lat or lon found');
  end;

  procedure writeLog(blurb varchar2, msg varchar2) is
  
  begin
    insert into email_log
      (emaillog_id, description, logtext)
    values
      (email_log_seq.nextval, blurb, msg);
    commit;
    --exception
    --when others
    --then rollback;
  end;

  function getLiteralString(strValue in varchar2) return varchar2 is
    retval varchar(3000) := '''' || strValue || '''';
  begin
    return retval;
  end;

  /* source: http://fdegrelle.over-blog.com/article-1342263.html */
  function Split(PC$Chaine IN VARCHAR2, -- input string
                 PN$Pos    IN PLS_INTEGER, -- token number
                 PC$Sep    IN VARCHAR2 DEFAULT ',' -- separator character
                 ) RETURN VARCHAR2 IS
    LC$Chaine VARCHAR2(32767) := PC$Sep || PC$Chaine;
    LI$I      PLS_INTEGER;
    LI$I2     PLS_INTEGER;
  BEGIN
    LI$I := INSTR(LC$Chaine, PC$Sep, 1, PN$Pos);
    IF LI$I > 0 THEN
      LI$I2 := INSTR(LC$Chaine, PC$Sep, 1, PN$Pos + 1);
      IF LI$I2 = 0 THEN
        LI$I2 := LENGTH(LC$Chaine) + 1;
      END IF;
      RETURN(SUBSTR(LC$Chaine, LI$I + 1, LI$I2 - LI$I - 1));
    ELSE
      RETURN NULL;
    END IF;
  END;

  /* source: http://fdegrelle.over-blog.com/article-1694534.html */
  function Dynamic_In(PC$list IN VARCHAR2) return sys.dbms_debug_vc2coll is
    ttab     sys.dbms_debug_vc2coll := sys.dbms_debug_vc2coll();
    LC$Token VARCHAR2(100);
    i        PLS_INTEGER := 1;
  BEGIN
    -- Populate the collection --
    LOOP
      LC$Token := Split(PC$List, i, ',');
      EXIT WHEN LC$Token IS NULL;
      ttab.extend;
      ttab(ttab.COUNT) := LC$Token;
      i := i + 1;
    END LOOP;
    RETURN ttab;
  END;

end MPNET_EMAIL_DB;
/
 CREATE OR REPLACE PACKAGE  "MPNET_EMAIL_FORMAT" is
  brandFont       constant varchar2(100):='<FONT face="Verdana" size="2">';
  headertext      constant varchar2(10) := '';
  footertext     constant VARCHAR2(400) := 'On <<manpower.com link>> you can find all the latest jobs, set-up Job Agents that will send you relevant jobs by email, and get our recruiters to start actively seeking out new jobs for you. We also have a host of other services for making your job search as quick and effective as possible. Why don''t you come and try us now?';
  --footertext2    constant VARCHAR2(600) := footertext || '</p>' ||
  --                  'Please do not reply to this email. It is sent automatically and the email address from which it is sent can not receive emails.';
  manpowerfooter constant VARCHAR2(200) := '</p>Copyright Manpower Inc. All rights reserved.</p>Click here to view our Privacy Statement - http://www.manpower.com/mpcom/PrivacyPolicy.jsp </p>';
  --TODO: complete the text for mymanpower1;
  mymanpower1    constant varchar2(1000) := 'You''re My Manpower lets you:<p>   - Add, Edit or Delete Job Agents which ensure you find out about suitable jobs by email, as soon as they become available.<br>   -  Turn on/off our Active Job Search service, which enables our recruiters to help you find work.<br>   -  Provide us with, or update, your personal information so that our recruiters have the most accurate picture of your profile.<br>   -  Save jobs you are interested in so that our recruiters have the most accurate picture of your profile.<br>   -  Save jobs you are interested in so that you can quickly apply for them later.<br>   -  Store your CV and covering letters to enable quick job application.<br>   -  Track all your Manpower job applications.<br>   -  Read the latest careers advice from our recruitment experts.';
  mymanpower2    constant varchar2(200):= 'You can access your My Manpower account from:';
  --TODO: link to My Manpower login with auto populated login?
  mymanpower3    constant varchar2(100):= 'We wish you the very best luck with your job hunting.';
  
  closing        constant varchar2(50):= 'Kind Regards,';
  signature      constant varchar2(50):= 'The Manpower Team';
  divider        constant varchar2(100):='________________________________________________________________________________';
  dblspc         constant varchar2(10):='<br><br>';
  sglspc         constant varchar2(10):='<br>';
  hrule          constant varchar2(10):='<hr>';
  
  -- Author  : AMILLAR
  -- Created : 5/9/2006 1:42:19 PM
  -- Purpose : apply formatting, provide static content
  
  -- Public type declarations
 -- type <TypeName> is <Datatype>;
  
  
  -- Public constant declarations
  --<ConstantName> constant <Datatype> := <Value>;

  -- Public variable declarations
  --<VariableName> <Datatype>;

  -- Public function and procedure declarations
  function getGreeting(recipientName varchar2) return varchar2;
  function getFooterText1 return varchar2;
  function getFooterText2 return varchar2;
  function getHorizRule return varchar2;
  function getSetupActiveJobSearchText return varchar2;
  function getSetupJobAgentText return varchar2;
  function getEnableJobAgentEmailText return varchar2;  
  function getRegistrationEmailText return varchar2;
  
  -- use jaFound and regLevel for dynamic content
  -- eg., if regLevel = 0 AND jaFound > 0 then... 
  procedure sendRegistrationEmail(sender_in varchar2, 
                      recipients_in varchar2, 
                      subject_in varchar2, 
                      mime_type_in varchar2, 
                      priority_in varchar2,                            
                      msgText varchar2);
                                   
  procedure sendPasswordEmail(sender_in varchar2, 
                      recipients_in varchar2, 
                      subject_in varchar2, 
                      mime_type_in varchar2, 
                      priority_in varchar2,                            
                      msgText varchar2);                                                                      
  
  procedure sendUpdateAcctDetailsEmail(sender_in varchar2, 
                      recipients_in varchar2, 
                      subject_in varchar2, 
                      mime_type_in varchar2, 
                      priority_in varchar2,                            
                      msgText varchar2);

  procedure sendToFriendEmail(sender_in varchar2, 
                      recipients_in varchar2, 
                      subject_in varchar2, 
                      mime_type_in varchar2, 
                      priority_in varchar2,                            
                      msgText varchar2);   
  
  procedure applyNowEmail(sender_in varchar2, 
                      recipients_in varchar2, 
                      subject_in varchar2, 
                      mime_type_in varchar2, 
                      priority_in varchar2,                            
                      msgText varchar2);
                      
  procedure sendJobSearchEmail(sender_in varchar2, 
                      recipients_in varchar2, 
                      subject_in varchar2, 
                      mime_type_in varchar2, 
                      priority_in varchar2,                            
                      msgText varchar2);                      
                      
  procedure updateEmailState(emailID number, emailState char);                                                                                                  
                                   
  function getJobAgentVacancyText(nbrVacancies number) return varchar2;
  
  function getJobAgentDetailsText(nbrTotalAgents number, jobAgentRec v_candidatejobagent%rowtype ) return varchar2;
  
  function getHrefLink(urlAddress varchar2, linkLabel varchar2) return varchar2;
  
  procedure sendEmail(sender_in varchar2, 
                      recipients_in varchar2, 
                      subject_in varchar2, 
                      mime_type_in varchar2, 
                      priority_in varchar2,                            
                      msgText varchar2);
  
end mpnet_email_format;
/
CREATE OR REPLACE PACKAGE BODY  "MPNET_EMAIL_FORMAT" is
  /*
  -- Private type declarations
  type <TypeName> is <Datatype>;
  
  -- Private constant declarations
  <ConstantName> constant <Datatype> := <Value>;
  
  -- Private variable declarations
  <VariableName> <Datatype>;
  
  -- Function and procedure implementations
  */
  /*headertext     constant VARCHAR2(200):='';
  footertext     constant VARCHAR2(400) := 'On <<manpower.com link>> you can find all the latest jobs, set-up Job Agents that will send you relevant jobs by email, and get our recruiters to start actively seeking out new jobs for you. We also have a host of other services for making your job search as quick and effective as possible. Why don''t you come and try us now?';
  footertext2    constant VARCHAR2(600) := '</p>' ||
                    'Please do not reply to this email. It is sent automatically and the email address from which it is sent can not receive emails.';
  manpowerfooter constant VARCHAR2(200) := '</p>Copyright Manpower Inc. All rights reserved.</p>Click here to view our Privacy Statement - http://www.manpower.com/mpcom/PrivacyPolicy.jsp </p>';
  */
  --dblspc                  constant varchar2(10):='<br><br>';
  mpnet_login_url         constant VARCHAR2(200):= 'https://portal.manpower.com/wps/portal/preview/login';
  --brandFont               constant varchar2(100):='<FONT face="Verdana" size="2">';
  --divider                 constant varchar2(100):='________________________________________________________________________________';
  footertext2             constant VARCHAR2(600) := '</p>' 
                                                    ||'Please do not reply to this email. It is sent automatically and the email address from which it is sent can not receive emails.';
  
  function getHyperlinkText(linkURL varchar2, linkLabel varchar2) return varchar2 is     
  begin
     
     return '<a href="'|| linkURL ||'">'|| linkLabel ||'</a>';
  end;
   
  function getGreeting(recipientName varchar2)return varchar2 is
    retval varchar2(200);
  begin
    retval:='<FONT face="Verdana" size="2">
    <br><br>Dear '||recipientName||',<br><br>
    </font>';
    return retval;
  end;  
    
  function getFooterText return varchar2 is
    retval varchar2(3200);
  begin
    retval := dblspc
              ||'<FONT face="Verdana" size="2"> On '
              || getHyperlinkText(mpnet_login_url, 'Manpower') 
              ||' you can find all the latest jobs, set-up Job Agents that will send you relevant jobs by email, and get our recruiters to start actively seeking out new jobs for you. We also have a host of other services for making your job search as quick and effective as possible. Why don''t you come and try us now?'
              ||dblspc;
    return retval;
  end;
  
  function getFooterText1 return varchar2 is
    retval varchar2(3200);
  begin
    retval := '<FONT face="Verdana" size="2">
    <br><br>
    Please do not reply to this email. It is sent automatically and the email address from which it is sent can not receive emails.
    <br><br>
    If you have advice or feedback for us, then please let us know using our <a href="http://mpnet.manpower.com/help_us_improve">Help Us Improve form</a>
    <br><br>
    If you have specific technical questions relating to our website, please use the following <a href="http://mpnet.manpower.com/technical_query_form">Technical Query form</a>
    </font>';
    return retval;
  end;

  function getFooterText2 return varchar2 is
    retval varchar2(3200);
  begin
    -- TODO: Manpower footer text here
    retval := '<FONT face="Verdana" size="2">
    <br><br>
    Copyright Manpower Inc. All rights reserved.
    <br><br>
    Click here to view our Privacy Statement - <a href="http://mpnet.manpower.com/privacystatement">mpnet.manpower.com/privacy</a>
    <br><br>
    </font>';
    return retval;
  end;

  function getHorizRule return varchar2 is
    retval varchar2(100);
  begin
    retval := '<hr>';
    return retval;
  end;
  
  function getSetupActiveJobSearchText return varchar2 is
    retval varchar2(500);
  begin
    retval:='<FONT face="Verdana" size="2">
    <br><br>
    By the way, you are not signed up for our Active Job Search service. Why not let us take the work out of your job hunting? '|| getHyperlinkText(mpnet_login_url, 'Click here') ||' now to enable our expert recruiters to start discretely searching for the perfect job for you. 
    <br><br>
    </font>';
    return retval;
  end getSetupActiveJobSearchText;
  
  function getSetupJobAgentText return varchar2 is
    retval varchar2(500);
  begin
    retval:='<FONT face="Verdana" size="2">
    <br><br>
    As you do not have a Job Agent, why not save yourself time, and have all relevant jobs emailed to you as soon as they become available? Click here now to set this up. 
    <br><br>
    </font>';
  return retval;
  end;
  
  function getEnableJobAgentEmailText return varchar2 is
    retval varchar2(500);
    begin
    retval:='<FONT face="Verdana" size="2">
    <br><br>
    You have Job Agents set-up, but are not currently receiving them by email. Why not have us send them to you whenever suitable new jobs become available. Click here to do this now. 
    <br><br>
    </font>';
    return retval;
    end;
    
   function getRegistrationEmailText return varchar2 is
     retval varchar2(2000);
   begin
        -- do something
     return retval;
   end;
   
   /* send email procedures*/  
   
   procedure sendRegistrationEmail(sender_in varchar2, 
                                   recipients_in varchar2, 
                                   subject_in varchar2, 
                                   mime_type_in varchar2, 
                                   priority_in varchar2, 
                                   msgText varchar2) is
   begin

        mpnet_email_format.sendEmail(sender_in, 
                      recipients_in, 
                      subject_in, 
                      mime_type_in, 
                      priority_in,                            
                      msgText);
   
   end;
   
   procedure sendPasswordEmail(sender_in varchar2, 
                                   recipients_in varchar2, 
                                   subject_in varchar2, 
                                   mime_type_in varchar2, 
                                   priority_in varchar2, 
                                   msgText varchar2) is
   begin

        mpnet_email_format.sendEmail(sender_in, 
                      recipients_in, 
                      subject_in, 
                      mime_type_in, 
                      priority_in,                            
                      msgText);
   
   end;
   
   procedure sendUpdateAcctDetailsEmail(sender_in varchar2, 
                                   recipients_in varchar2, 
                                   subject_in varchar2, 
                                   mime_type_in varchar2, 
                                   priority_in varchar2, 
                                   msgText varchar2) is
   begin

        mpnet_email_format.sendEmail(sender_in, 
                      recipients_in, 
                      subject_in, 
                      mime_type_in, 
                      priority_in,                            
                      msgText);
   
   end;
      
   procedure sendToFriendEmail(sender_in varchar2, 
                                   recipients_in varchar2, 
                                   subject_in varchar2, 
                                   mime_type_in varchar2, 
                                   priority_in varchar2, 
                                   msgText varchar2) is
   begin

        mpnet_email_format.sendEmail(sender_in, 
                      recipients_in, 
                      subject_in, 
                      mime_type_in, 
                      priority_in,                            
                      msgText);
   
   end;        
   
   procedure applyNowEmail(sender_in varchar2, 
                                   recipients_in varchar2, 
                                   subject_in varchar2, 
                                   mime_type_in varchar2, 
                                   priority_in varchar2, 
                                   msgText varchar2) is
   begin

        mpnet_email_format.sendEmail(sender_in, 
                      recipients_in, 
                      subject_in, 
                      mime_type_in, 
                      priority_in,                            
                      msgText);
   
   end;        
                      
   procedure sendJobSearchEmail(sender_in varchar2, 
                                   recipients_in varchar2, 
                                   subject_in varchar2, 
                                   mime_type_in varchar2, 
                                   priority_in varchar2, 
                                   msgText varchar2) is
   begin

        mpnet_email_format.sendEmail(sender_in, 
                      recipients_in, 
                      subject_in, 
                      mime_type_in, 
                      priority_in,                            
                      msgText);
   
   end;        
   
   procedure updateEmailState(emailID number, emailState char) is
   begin
       update EMAILS e set e.state = emailState where e.id = emailID;
       commit;
   end;                                                  
                                   
   /* Job Agent functions*/
   function getJobAgentVacancyText(nbrVacancies number) return varchar2 is
      retval varchar2(3200);
   begin
      retval:= 'Below we have listed the ' || nbrVacancies || ' new vacancies that match your Job Agent details.';
      return retval;
   end;
   
   function getJobAgentDetailsText(nbrTotalAgents number, jobAgentRec v_candidatejobagent%rowtype ) return varchar2 is
      retval varchar2(3200);
      --dblspc varchar2(10):='<br><br>';
   begin
      retval:= 'You are currently set up to receive '||nbrTotalAgents||' job agents. This one sends you jobs that match ALL the following:'
               || dblspc
               || 'Are within the Industry Sector(s):<br>'||jobAgentRec.Jobindustry
               || dblspc
               || 'Have the following words in the Job Title:<br>'||jobAgentRec.Jobtitle
               || dblspc
               || 'Contain the following skill words:<br>'||jobAgentRec.Candidateskills
               || dblspc
               || 'Are in the following location:<br>Within '||jobAgentRec.Jobproximity||' of '||jobAgentRec.Joblocation
               || dblspc
               || 'And have the following Contract Type:<br>'||jobAgentRec.Contracttype
               || dblspc
               || 'On the following websites:<br>'||jobAgentRec.Jobcountry
               || dblspc
               || 'Email Sent:<br>'||jobAgentRec.Frequency
               || dblspc;
      return retval;
   end;
   
   function getHrefLink(urlAddress varchar2, linkLabel varchar2) return varchar2 is
      retval varchar2(3000):= '<a href="'||urlAddress||'">'||linkLabel||'</a>';
   begin
      return retval;  
   end;
   
   procedure sendEmail(sender_in varchar2, 
                      recipients_in varchar2, 
                      subject_in varchar2, 
                      mime_type_in varchar2, 
                      priority_in varchar2,                            
                      msgText varchar2) is
      
      conn sys.utl_smtp.connection;                
      begin
      
      conn := demo_mail.begin_mail(sender     => sender_in,
                                   recipients => recipients_in,
                                   subject    => subject_in,
                                   mime_type  => mime_type_in,
                                   priority   => priority_in);
                                   
      demo_mail.write_mb_text(conn    => conn,
                              message => msgText);
                                                                                                    
      demo_mail.end_mail(conn => conn);
      
      end;
           
end mpnet_email_format;
/
 CREATE OR REPLACE PACKAGE  "ZIPDISTANCE" 
-- Find Zip codes in a radiius from a given zip code
IS
    FUNCTION DEGTORAD (p_Degree IN NUMBER) RETURN NUMBER;
    FUNCTION DISTCHECK (p_Latc IN NUMBER,
                        p_Lonc IN NUMBER,
                        p_Latd IN NUMBER,
                        p_Lond IN NUMBER,
                        p_DistUnit IN VARCHAR2
                       )
                       RETURN NUMBER;
    FUNCTION LATRANGE(p_Latitude IN NUMBER,
                      p_LatDir IN VARCHAR2,
                      p_Dist IN NUMBER,
                      p_DistUnit IN VARCHAR2
                     ) RETURN NUMBER;

    FUNCTION LONRANGE(p_Latitude IN NUMBER,
                      p_Longitude IN NUMBER,
                      p_LonDir IN VARCHAR2,
                      p_Dist IN NUMBER,
                      p_DistUnit IN VARCHAR2
                     ) RETURN NUMBER;
END ZIPDISTANCE;
/
CREATE OR REPLACE PACKAGE BODY  "ZIPDISTANCE" 
IS

    FUNCTION DEGTORAD (p_Degree IN NUMBER) RETURN NUMBER
    IS
        c_PI CONSTANT NUMBER := 22/7;
        c_DegtoRad CONSTANT NUMBER := c_PI/180;

    BEGIN
        RETURN (p_Degree * c_DegtoRad);

    END DEGTORAD;


    FUNCTION DISTCHECK (p_Latc IN NUMBER,
                        p_Lonc IN NUMBER,
                        p_Latd IN NUMBER,
                        p_Lond IN NUMBER,
                        p_DistUnit IN VARCHAR2
                       )
                       RETURN NUMBER
    IS

/*
DETERMINE DISTANCE BETWEEN 2 POINTS
... presuming a spherical Earth with radius R (see below), and
the locations of the two points in spherical coordinates (longitude
and latitude) are lon1,lat1 and lon2,lat2 then the

Haversine Formula (from R.W. Sinnott, "Virtues of the Haversine",
Sky and Telescope, vol. 68, no. 2, 1984, p. 159):

dlon = lon2 - lon1
dlat = lat2 - lat1
a = (sin(dlat/2))^2 + cos(lat1) * cos(lat2) * (sin(dlon/2))^2
c = 2 * arcsin(min(1,sqrt(a)))
d = R * c

will give mathematically and computationally exact results. The
intermediate result c is the great circle distance in radians. The
great circle distance d will be in the same units as R.

When the two points are antipodal (on opposite sides of the Earth),
the Haversine Formula is ill-conditioned (see the discussion below
the Law of Cosines for Spherical Trigonometry), but the error, perhaps
as large as 2 km (1 mi), is in the context of a distance near
20,000 km (12,000 mi). Further, there is a possibility that round-off
errors might cause the value of sqrt(a) to exceed 1.0, which would
cause the inverse sine to crash without the bulletproofing provided by
the min() function.

Most computers require the arguments of trigonometric functions to be
expressed in radians. To convert lon1,lat1 and lon2,lat2 from degrees,
minutes, and seconds to radians, first convert them to decimal
degrees. To convert decimal degrees to radians, multiply the number
of degrees by pi/180 = 0.017453293 radians/degree.

http://www.census.gov/cgi-bin/geo/gisfaq?Q5.1
*/

        --p_DistUnit VARCHAR2(1) := 'M';
        --Lat1 NUMBER := 43.499208;
        --Lon1 NUMBER := -88.546521;
        --Lat2 NUMBER := 43.148621;
        --Lon2 NUMBER := -87.911753;
        v_LatRadc NUMBER; -- radians
        v_LonRadc NUMBER; -- radians
        v_LatRadd NUMBER; -- radians
        v_LonRadd NUMBER; -- radians
        v_LatRadDif NUMBER; -- radians
        v_LonRadDif NUMBER; -- radians
        v_RadDist NUMBER :=0;   -- distance in radians
        X NUMBER;
--        PI NUMBER := 22/7;
--        DegtoRad NUMBER := PI/180;
        c_EarthRadiusMI CONSTANT NUMBER := 3958.754;
        c_EarthRadiusKM CONSTANT NUMBER := c_EarthRadiusMI * 1.609344;

        v_DistCalc NUMBER;
        v_Dist NUMBER;

        BEGIN

            IF p_Latc IS NULL THEN
                NULL;
            END IF;


            IF p_Latc = 0 Or
               p_Lonc = 0 Or
               p_Latd = 0 Or
               p_Lond = 0 THEN

               NULL;

            ELSIF p_Latc = p_Latd AND
                  p_Lonc = p_Lond THEN
                v_Dist := 0;
            END IF;

            v_LatRadc := ZIPDISTANCE.DEGTORAD(p_Latc);
            v_LonRadc := ZIPDISTANCE.DEGTORAD(p_Lonc);
            v_LatRadd := ZIPDISTANCE.DEGTORAD(p_Latd);
            v_LonRadd := ZIPDISTANCE.DEGTORAD(p_Lond);
            v_LatRadDif := ABS(v_LatRadc - v_LatRadd);
            v_LonRadDif := ABS(v_LonRadc - v_LonRadd);

            X := POWER((SIN(v_LatRadDif/2)), 2) + (COS(v_LatRadc) * COS(v_LatRadd) * POWER((SIN(v_LonRadDif/2)), 2));

            IF X > 1 THEN
                X := 1;
            END IF;

            v_RadDist := 2 * ASIN(SQRT(X));

            IF p_DistUnit = 'MI' THEN
                v_DistCalc := c_EarthRadiusMI;
            ELSE
                v_DistCalc := c_EarthRadiusKM;
            END IF;

            v_Dist := v_DistCalc * v_RadDist;

            RETURN (v_Dist);

    END DISTCHECK;


    FUNCTION LATRANGE(p_Latitude IN number,
                      p_LatDir IN VARCHAR2,
                      p_Dist IN NUMBER,
                      p_DistUnit IN VARCHAR2
                     )
                     RETURN NUMBER
/*
DISTANCE BETWEEN LATITUDE
1 degree latitude = 110.6 km = 68.703 mi
*/
    IS
    --DECLARE
        v_Lat NUMBER;
        c_LatDistKM CONSTANT NUMBER :=110.6;
        c_LatDistMI CONSTANT NUMBER := 68.703;
        v_LatDist NUMBER;
        v_LatDistFactor NUMBER;

    BEGIN
        IF upper(p_DistUnit) = 'MI' THEN
            v_LatDist := c_LatDistMI;
        ELSE
            v_LatDist := c_LatDistKM;
        END IF;

        v_LatDistFactor := (p_Dist/v_LatDist);

        IF upper(p_LatDir) = 'S' THEN
            v_LatDistFactor := v_LatDistFactor * -1;
        END IF;

        v_Lat := p_Latitude + v_LatDistFactor;

    	RETURN(v_Lat);
    END LATRANGE;

    FUNCTION LONRANGE(p_Latitude IN NUMBER,
                      p_Longitude IN NUMBER,
                      p_LonDir IN VARCHAR2,
                      p_Dist IN NUMBER,
                      p_DistUnit IN VARCHAR2
                     )
                     RETURN NUMBER
/*
DISTANCE BETWEEN LONGITUDE (MUST KNOW LATITUDE)
1 degree longitude = 111.3km * cos(latitude) = 69.172mi * cos(latitude)
*/
    IS
    --DECLARE
        v_LatRad NUMBER;
        v_Lon NUMBER;
        c_LonDistKM CONSTANT NUMBER := 111.3;
        c_LonDistMI CONSTANT NUMBER := 69.172;
        v_LonDist NUMBER;
        v_LonDistFactor NUMBER;

    BEGIN

        IF upper(p_DistUnit) = 'MI' THEN
            v_LonDist := c_LonDistMI;
        ELSE
            v_LonDist := c_LonDistKM;
        END IF;

        v_LatRad := ZIPDISTANCE.DEGTORAD(p_Latitude);

        v_LonDistFactor := p_Dist/(v_LonDist * cos(v_LatRad));
        IF upper(p_LonDir) = 'W' THEN
            v_LonDistFactor := v_LonDistFactor * -1;
        END IF;

        v_Lon := p_Longitude + v_LonDistFactor;

        RETURN(v_Lon);

    END LONRANGE;

END ZIPDISTANCE;
/
 

CREATE OR REPLACE PROCEDURE  "CALL_VIEW_PRC" is
  message varchar2(200);
  name   mpnetadmin.adver_cjagents_candi_vw.agentname%type;
  title  mpnetadmin.adver_cjagents_candi_vw.jobtitle%type;
  sector mpnetadmin.adver_cjagents_candi_vw.industrysector%type;
  skills mpnetadmin.adver_cjagents_candi_vw.candidateskills%type;

  cursor cur_vista is select agentname, jobtitle, candidateskills, industrysector from mpnetadmin.adver_cjagents_candi_vw v;

begin
    open cur_vista;
    loop
      fetch cur_vista into name,title,skills,sector;
      exit when cur_vista%notfound;
        message := 'AGENT NAME:'||name||', JOBTITLE:'||title||', CANDIDATESKILLS:' ||skills||', JOBINDUSTRY:' ||sector||'';
        DBMS_OUTPUT.PUT_LINE(message);
    end loop;
    close cur_vista;
end;
/
 CREATE OR REPLACE PROCEDURE  "JOB_ADVERTISEMENTS_PRC" AS
 JobNo user_jobs.job%TYPE;
BEGIN
  dbms_job.submit(JobNo, 'begin update_advertisements_prc; end;', SYSDATE,
  'SYSDATE+5/1440');
  COMMIT;
END;
/
 CREATE OR REPLACE PROCEDURE  "JOB_CANDIDATERESUMES_PRC" AS
 JobNo user_jobs.job%TYPE;
BEGIN
  dbms_job.submit(JobNo, 'begin updated_candidateresumes_prc; end;', SYSDATE,
  'SYSDATE+5/1440');
  COMMIT;
END;
/
 CREATE OR REPLACE PROCEDURE  "JOB_EMAILAGENT_PRC" AS
 JobNo user_jobs.job%TYPE;
BEGIN
  -- start: immediately
  -- interval: run every 15 minutes from last run
  dbms_job.submit(JobNo, 'begin mpnet_emailagent; end;', SYSDATE,
  'SYSDATE + 15/1440');
  COMMIT;
END;
/
 CREATE OR REPLACE PROCEDURE  "JOB_JOBAGENT_INDGEN_DAILY" AS
 JobNo user_jobs.job%TYPE;

BEGIN
  -- start: tomorrow at noon
  -- interval: daily
  dbms_job.submit(JobNo, 
     'mpnet_jobagent(in_siteid => 10000, in_frequency => ''D'');', 
      trunc(SYSDATE)+12/24,
     'SYSDATE + 1');
  COMMIT;
END;
/
 CREATE OR REPLACE PROCEDURE  "JOB_JOBAGENT_INDGEN_WEEKLY" AS
 JobNo user_jobs.job%TYPE;

BEGIN
  -- start: tomorrow at noon
  -- interval: weekly
  dbms_job.submit(JobNo, 
     'mpnet_jobagent(in_siteid => 10000, in_frequency => ''W'');', 
      NEXT_DAY(TRUNC(SYSDATE), 'FRIDAY') + 12/24,
     'SYSDATE + 7');
  COMMIT;
END;
/
 CREATE OR REPLACE PROCEDURE  "JOB_JOBAGENT_INDPRO_DAILY" AS
 JobNo user_jobs.job%TYPE;

BEGIN
  -- start: immediately
  -- interval: run every 5 minutes from last run
  dbms_job.submit(JobNo, 
     'mpnet_jobagent(in_siteid => 10001, in_frequency => ''D'');', 
      trunc(SYSDATE)+12/24,
     'SYSDATE + 1');
  COMMIT;
END;
/
 CREATE OR REPLACE PROCEDURE  "JOB_JOBAGENT_INDPRO_WEEKLY" AS
 JobNo user_jobs.job%TYPE;

BEGIN
  -- start: tomorrow at noon
  -- interval: weekly
  dbms_job.submit(JobNo, 
     'mpnet_jobagent(in_siteid => 10001, in_frequency => ''W'');', 
      NEXT_DAY(TRUNC(SYSDATE), 'FRIDAY') + 12/24,
     'SYSDATE + 7');
  COMMIT;
END;
/
 CREATE OR REPLACE PROCEDURE  "JOB_JOBAGENT_PRC" AS
 JobNo user_jobs.job%TYPE;

BEGIN
  -- start: immediately
  -- interval: run every 5 minutes from last run
  dbms_job.submit(JobNo, 
     'mpnet_jobagent(in_siteid => 5, in_frequency => ''D'');', 
      SYSDATE,
     'SYSDATE + 1');
  COMMIT;
END;
/
 CREATE OR REPLACE PROCEDURE  "JOB_JOBAGENT_SITE5_DAILY" AS
 JobNo user_jobs.job%TYPE;

BEGIN
  -- start: tomorrow at noon
  -- interval: daily
  dbms_job.submit(JobNo, 
     'mpnet_jobagent(in_siteid => 5, in_frequency => ''D'');', 
      trunc(SYSDATE)+12/24,
     'SYSDATE + 1');
  COMMIT;
END;
/
 CREATE OR REPLACE PROCEDURE  "JOB_JOBAGENT_SITE5_WEEKLY" AS
 JobNo user_jobs.job%TYPE;

BEGIN
  -- start: tomorrow at noon
  -- interval: weekly
  dbms_job.submit(JobNo, 
     'mpnet_jobagent(in_siteid => 5, in_frequency => ''W'');', 
      NEXT_DAY(TRUNC(SYSDATE), 'FRIDAY') + 12/24,
     'SYSDATE + 7');
  COMMIT;
END;
/
 CREATE OR REPLACE PROCEDURE  "JOB_JOBAGENT_WEEKLY_PRC" AS
 JobNo user_jobs.job%TYPE;

BEGIN
  -- start: immediately
  -- interval: run every 5 minutes from last run
  dbms_job.submit(JobNo, 
     'mpnet_jobagent(in_siteid => 5, in_frequency => ''W'');', 
      SYSDATE,
     'SYSDATE + 7');
  COMMIT;
END;
/
 CREATE OR REPLACE PROCEDURE  "JOB_LOCATIONNAME_PRC" AS
 JobNo user_jobs.job%TYPE;
begin
  dbms_job.submit(JobNo, 'begin UPDATE_LOCATIONNAMES_PRC; end;', SYSDATE,
  'SYSDATE+5/1440');
  COMMIT;  
end ;
/
 CREATE OR REPLACE PROCEDURE  "JOB_REGIONS_PRC" AS
 JobNo user_jobs.job%TYPE;
begin
  dbms_job.submit(JobNo, 'begin UPDATE_REGIONS_PRC; end;', SYSDATE,
  'SYSDATE+5/1440');
  COMMIT;  
end ;
/
 CREATE OR REPLACE PROCEDURE  "MPNET_EMAILAGENT" is
/*
|| Author: arnold millar
|| Maintained by : arnold millar
||
|| Modification History
|| When         Who       What
|| 08/07/2006   am        email execution by site using v_emailagent view
|| 09/18/2006   am        when SMTP Exception occurs, then update emails.state = 'X'
*/
  -- TO RUN THE PROC ON CMD LINE: exec mpnetadmindv.mpnet_emailagent;
  
  -- UNCOMMENT FOR TESTING ONLY!
  sender_in     VARCHAR2(100); --:= 'mpnettest@manpower.com'; --'sendtoafriend@manpower.com'
  recipients_in VARCHAR2(200); --:= 'arnold.millar@manpower.com';
  subject_in    VARCHAR2(100); -- := 'MPNET 2.3 Email Test';
  mime_type_in  VARCHAR2(100) := 'text/html; charset="UTF-8"';
  priority_in   PLS_INTEGER;
  
  EMAILSENT     constant char:= 'Y';
  EMAILNOTSENT  constant char:= 'N';
  EMAILERROR    constant char:= 'X';
  
  TESTING       constant boolean:= false; -- set TRUE to test 
  
  NO_RECIPIENT_EMAIL_FOUND exception;

  cursor cur_emails is
         select 
           id,
           friends_email,
           friends_name,
           message,
           sender_email,
           type,
           subject,
           from_line,
           active                    
         --from emails t
         from v_emailagent
         where 
             state = EMAILNOTSENT;   
           --state <> EMAILSENT; 
           --lower(sender_email) = 'arnold.millar@manpower.com'; --like 'mike.stoffel%'; -- for TESTING!
           --and type = 'SENDFRIEND' need to define static constants
           -- and rownum < 5 -- to limit emails!

  recEmail cur_emails%rowtype; 
    
  -- for testing
  i integer := 0;
  
begin
  open cur_emails;
  loop
  
    fetch cur_emails
      into recEmail;
  
    if (TESTING) then
      if cur_emails%rowcount = 0 then
         DBMS_OUTPUT.PUT_LINE('NO EMAILS TO SEND');
         mpnet_email_db.writeLog('emailagent status','NO EMAILS FOUND / NONE SENT');
      end if;
    end if;
  
    exit when cur_emails%notfound;      
    
    --FOR TESTING
    i:=i+1;
    dbms_output.put_line('record processed...'||i);
    
    /* ===== START OF EMAIL PROCESSING =====*/   
    begin
    
      -- Register email
      if (recEmail.type = 'REGISTER') and (recEmail.Friends_Email is not null) then
         DBMS_OUTPUT.PUT_LINE('registration email: ' || recEmail.Friends_Email); --FOR TESTING!
         mpnet_email_format.sendRegistrationEmail(sender_in     => recEmail.From_Line,
                                     recipients_in => recEmail.Friends_Email,
                                     subject_in    => recEmail.Subject,
                                     mime_type_in  => mime_type_in,
                                     priority_in   => priority_in,
                                     msgText => recEmail.Message);
         DBMS_OUTPUT.PUT_LINE('registration email: SENT');
         mpnet_email_format.updateEmailState(recEmail.id, EMAILSENT);
      end if;
      
      -- Apply Now email
        if (recEmail.type = 'APPLYNOW') AND (recEmail.Friends_Email is not null) then
        DBMS_OUTPUT.PUT_LINE('receiver email: ' || recEmail.Friends_Email); --FOR TESTING!
           mpnet_email_format.applyNowEmail(sender_in     => recEmail.From_Line,
                                     recipients_in => recEmail.Friends_Email,
                                     subject_in    => recEmail.Subject,
                                     mime_type_in  => mime_type_in,
                                     priority_in   => priority_in,
                                     msgText => recEmail.Message);      
                                     
           mpnet_email_format.updateEmailState(recEmail.id, EMAILSENT);                                   
       end if;
    
      
      -- Password email
      if (recEmail.type = 'PASSWORD') and (recEmail.Friends_Email is not null) then
         DBMS_OUTPUT.PUT_LINE('password email: ' || recEmail.Friends_Email); --FOR TESTING!
         mpnet_email_format.sendPasswordEmail(sender_in     => recEmail.From_Line,
                                     recipients_in => recEmail.Friends_Email,
                                     subject_in    => recEmail.Subject,
                                     mime_type_in  => mime_type_in,
                                     priority_in   => priority_in,
                                     msgText => recEmail.Message);
         DBMS_OUTPUT.PUT_LINE('password email: SENT');
         mpnet_email_format.updateEmailState(recEmail.id, EMAILSENT);
      end if;
      
      -- Sign Up for Job Agent email
   
      -- Active Job Search Sign Up email
      if (recEmail.type = 'JOBSEARCH') and (recEmail.Friends_Email is not null) then
         DBMS_OUTPUT.PUT_LINE('job search email: ' || recEmail.Friends_Email); --FOR TESTING!
         mpnet_email_format.sendJobSearchEmail(sender_in     => recEmail.From_Line,
                                     recipients_in => recEmail.Friends_Email,
                                     subject_in    => recEmail.Subject,
                                     mime_type_in  => mime_type_in,
                                     priority_in   => priority_in,
                                     msgText => recEmail.Message);
         DBMS_OUTPUT.PUT_LINE('password email: SENT');
         
         mpnet_email_format.updateEmailState(recEmail.id, EMAILSENT);
      end if;
     
      -- Update Account Details email
      if (recEmail.type = 'UPDATEACCT') AND (recEmail.Friends_Email is not null) then
         DBMS_OUTPUT.PUT_LINE('update acct email:'|| recEmail.Friends_Email);
         mpnet_email_format.sendUpdateAcctDetailsEmail(sender_in     => recEmail.From_Line,
                                     recipients_in => recEmail.Friends_Email,
                                     subject_in    => recEmail.Subject,
                                     mime_type_in  => mime_type_in,
                                     priority_in   => priority_in,
                                     msgText => recEmail.Message);
                                     
         mpnet_email_format.updateEmailState(recEmail.id, EMAILSENT);                                   
      end if;
      
      -- Deleted Account Acknowledgement email (this is currently not in requirements)
      
      -- Send Friend email    
      if (recEmail.type = 'SENDFRIEND') AND (recEmail.Friends_Email is not null) then
        DBMS_OUTPUT.PUT_LINE('friends email: ' || recEmail.Friends_Email); --FOR TESTING!
         mpnet_email_format.sendToFriendEmail(sender_in     => recEmail.From_Line,
                                     recipients_in => recEmail.Friends_Email,
                                     subject_in    => recEmail.Subject,
                                     mime_type_in  => mime_type_in,
                                     priority_in   => priority_in,
                                     msgText => recEmail.Message);      
                                     
         mpnet_email_format.updateEmailState(recEmail.id, EMAILSENT);                                             
      end if;
      
      /*  Send Help Us Improve email to portal support team
          07.25.06 HARDCODE THE FOLLOWING:
              recipients_in = kevin.zak@manpower.com
              sender_in = MPNet Portal
          Subject line value is stored in friends_name field
      */
      if (recEmail.type = 'FEEDBACK') then
         mpnet_email_format.sendEmail(sender_in     => 'mpnet_portal@manpower.com',
                                     recipients_in => 'kevin.zak@manpower.com',
                                     subject_in    => recEmail.Friends_Name,
                                     mime_type_in  => mime_type_in,
                                     priority_in   => priority_in,
                                     msgText => recEmail.Message);      
                                     
         mpnet_email_format.updateEmailState(recEmail.id, EMAILSENT);                                             
      end if;
      
      if (recEmail.type <> 'FEEDBACK') AND (recEmail.Friends_Email is null) then 
         RAISE NO_RECIPIENT_EMAIL_FOUND;
      end if;  
      
      exception
         when sys.utl_smtp.transient_error then
              mpnet_email_format.updateEmailState(recEmail.id, EMAILERROR);
              dbms_output.put_line('SMTP pkg failure '|| sqlcode ||'-'|| sqlerrm);
              mpnet_email_db.writeLog('emailagent status','SMTP failure');
              rollback;              
                     
         when NO_RECIPIENT_EMAIL_FOUND then
              mpnet_email_format.updateEmailState(recEmail.id, EMAILERROR);
              dbms_output.put_line('recipient email missing '|| sqlcode ||'-'|| sqlerrm);
              mpnet_email_db.writeLog('emailagent status: RECIPIENT EMAIL MISSING where emailid = '||recEmail.id, null);   
         
         when others then 
            mpnet_email_format.updateEmailState(recEmail.id, EMAILERROR);
            dbms_output.put_line('Critical failure: Unknown'); 
            mpnet_email_db.writeLog('emailagent status: ' || sqlcode ||'-'|| sqlerrm,'Critical failure: unhandled exception caught');
            rollback;     
    end; 
    /* ===== END OF EMAIL PROCESSING =====*/   

  end loop;
  
  /*
  exception   
      
       when others then 
            dbms_output.put_line('Critical failure: Unknown'); 
            mpnet_email_db.writeLog('emailagent status' || sqlcode ||'-'|| sqlerrm,'Critical failure: unhandled exception caught');
            rollback;
  */     
end MPNET_EMAILAGENT;
/
 CREATE OR REPLACE PROCEDURE  "MPNET_EMAIL_SCRUB" is
/*
|| this is a data scrub procedure to 
|| populate missing friends_email
||
*/
emailid emails.id%type;
email emails.friends_email%type;

cursor cur_email is 
select e.id, c.correspondemail
  into emailid, email
  from emails e, candidates c where e.site_id in(10000,10001)
  and c.firstname = 
  trim(substr(message, instr(message, chr(32)), instr(message, chr(44)) - instr(message, chr(32)))) 
  and trim(substr(message, instr(message, chr(32)), instr(message, chr(44)) - instr(message, chr(32))))<> 'aa'
  and e.friends_email is null;
  
begin

open cur_email;
loop
    fetch cur_email into emailid, email;
    if (cur_email%rowcount = 0) then
       dbms_output.put_line('No EMAILS record to scrub');
    end if;
    exit when cur_email%notfound;
    dbms_output.put_line('Scrubbing EMAILS record: '|| emailid ||' ' || email);
    
    -- emails.state = 'N' the email wasn't sent
    --              = 'X' error encountered during email processing
    --              = 'Y' yes, it was sent successfully
    update emails set emails.friends_email = email, emails.state = 'N'
      where emails.id = emailid;
    commit;
    
end loop;  
exception
  when others then
     dbms_output.put_line('Exception caught: ' || sqlcode || '-' || sqlerrm);
end mpnet_email_scrub;
/
 CREATE OR REPLACE PROCEDURE  "MPNET_JOBAGENT" (in_siteid    in number,
                                           in_frequency in char) is
/*
|| Author: arnold millar
|| Maintained by : arnold millar
||
|| Modification History
|| When         Who       What
|| 08/07/2006   am        removed Technical Query form from message
|| 08/24/2006   am        display industrySectors lookup_description not value_code
*/
/* ==== DEV NOTES ====
   issue: mpnet_jobagent is hardcoded to lookup English in EMAIL_RESOURCE
   resolved: created in-memory table of email_resource variables for each language per site

   =================== */

  /*
  -- standard query optimized for searching
  select * from advertisement where
  site_id = siteid_in and -- JOIN to site? site.language = lang_in and site.country = country_in
  contracttype = contract_in and
  contains(jobindustry, industry_in)>0 and
  contains(jobtitle, title_in)>0 and
  contains(candidateskills, skills_in)>0 and
  contains(location, location_in)>0 and
  zipdistance.DISTCHECK(lat_in, lon_in, lat_coordinate, lon_coordinate, unit_in) < proximity_in

  notes:
  -- include site_id in query for performance; however, if the jobagent references
  another country then search may be outside the site_id scope
  */

  FOOTER1 varchar2(3000);
  CLOSING1 varchar2(3000);
  CLOSING2 varchar2(3000);
  SIGNATURE varchar2(3000);
  SRESULT varchar2(3000);
  AGENTDETAIL varchar2(3000);
  URL_PRIVACY varchar2(3000);
  URL_PRIVACY_LABEL varchar2(3000);
  URL_IMPROVEFORM varchar2(3000);
  URL_IMPROVEFORM_LABEL varchar2(3000);
  URL_MYMANPOWER varchar2(3000);
  URL_MYMANPOWER_LABEL varchar2(3000);
  URL_ADVERT varchar2(3000);
  FREQUENCY varchar2(3000);
  CONTRACTTYPE varchar2(3000);
  SUBJECT_IN varchar2(3000);
  SENDER_IN varchar2(3000);
  LARGE_COUNT varchar2(3000);
  AGENT_NAMES varchar2(2000);
  LOCATION_CODE varchar2(2000);
  LOCATION_NAME varchar2(2000);
  LOCATION_HEADER varchar2(2000);
  TITLE_HEADER varchar2(2000);
  COMPANY_HEADER varchar2(2000);
  IMAGE_NAME varchar2(2000);
  URL_IMAGE varchar2(2000); 
  msgtext clob; --varchar2(4000);
  tmptext varchar2(4000);

  /* ==== INITIALIZE CURSORS ==== */

  -- for translating contracttype and frequency values in email
  cursor cur_lookup is
    select *
      from lookup_values
      where site_id = in_siteid
        and lookup_name in ('contractType','frequency');

  -- for email messages by site_id
  cursor cur_resource is
    select *
      from email_resource
     where site_id = in_siteid;
     
  -- select by SITE_ID and FREQUENCY
  cursor cur_cja is
    select *
      from v_candidatejobagent vcja
     where vcja.site_id = in_siteid
       and vcja.frequency = in_frequency
     order by vcja.correspondemail, vcja.agentname;

  type EmailResourceTyp is table of email_resource%rowtype
       index by binary_integer;
  emailresource_tab EmailResourceTyp;

  type LookupType is table of lookup_values%rowtype
       index by binary_integer;
  lookup_tab LookupType;

  cur_cja_aux cur_cja%rowtype;
  --use weak typed ref cursor for dynamic sql
  type refCur is ref cursor;
  cur_results     refCur;
  cur_results_rec advertisements%rowtype;
  cur_cja_name     refCur;
  cur_cja_name_aux v_candidatejobagent%rowtype;
  cur_region     refCur;
  cur_region_aux regions%rowtype;
  cur_region_results     refCur;
  cur_region_results_aux regions%rowtype;



  qryJobSearch      varchar2(1000);
  qryRegionsSearch  varchar2(1000);  
  qryJobSearchCount varchar2(1000);
  ORDERBYDATE       varchar2(50) := ' order by publicationdate desc';
  ROWLIMIT          varchar2(20) := 'rownum < 41';
  countJobSearch    integer;
  countJobAgents    number;
  vacancies         integer;
  
  conn           sys.utl_smtp.connection;
  mime_type_in   VARCHAR2(100) := 'text/html; charset="UTF-8"';
  priority_in    PLS_INTEGER;
  criteriaExists boolean;
  lat_out        number;
  lon_out        number;
  proximity      number;
  qryRegionsResult  varchar2(1000);
  regionName  varchar2(1000);
  resultCount    integer;
  modValue       number;
  tableStart varchar2(200) := '<TABLE border="0" cellpadding="0" cellspacing="2" width="100%">';

  i binary_integer:= 0;

  -- To test procedure, set TESTING true to send output to email_log
  --TESTING boolean:= true;
  TESTING boolean:= false;

begin

  -- if testing, then indicate in output buffer
  if TESTING then
    dbms_output.put_line('*** TESTING ONLY: NO EMAILS SENT / FOR EMAILS, SET TESTING VAR TO FALSE ***');
  end if;

  -- initialize the in-memory EmailResource table
  open cur_resource;
  loop
    i:= i + 1;
    fetch cur_resource into emailresource_tab(i);
    exit when cur_resource%notfound;
  end loop;
  close cur_resource;

  i:=0; -- reset for next loop

  -- initialize the in-memory Lookup table
  open cur_lookup;
  loop
    i:= i + 1;
    fetch cur_lookup into lookup_tab(i);
    exit when cur_lookup%notfound;
  end loop;
  close cur_lookup;

  -- build SQL statement based on job agent criteria
  open cur_cja;

  loop
    fetch cur_cja
      into cur_cja_aux;
    exit when cur_cja%notfound;

    begin -- exception handled code block
    --dbms_output.put_line('Start for Job Agent id = ' || to_char(cur_cja_aux.id));
    
    /* ==== RESET VARIABLES ==== */
    msgtext := null;
    tmptext := null;
    qryJobSearch := null;
    qryRegionsSearch := null;
    qryJobSearchCount := null;
    countJobSearch := 0;
    countJobAgents := 0;
    vacancies      := 0;
    criteriaExists := false;
    AGENT_NAMES    := null;
    LOCATION_CODE  := null;

    -- dynamic sql based on cja criteria

    if cur_cja_aux.joblanguage is not null then
      criteriaExists := true;
      qryJobSearch   := qryJobSearch ||
                        mpnet_email_db.getColumnClause('LANGUAGE',
                                                       cur_cja_aux.joblanguage,
                                                       'AND ');
    end if;

    if length(trim(cur_cja_aux.contracttype)) > 0 then
      criteriaExists := true;
      qryJobSearch   := qryJobSearch ||
                        mpnet_email_db.getColumnClause('CONTRACTTYPE',
                                                       cur_cja_aux.contracttype,
                                                       'AND');
    end if;

    if length(trim(cur_cja_aux.jobindustry)) > 0 then
      criteriaExists := true;
      qryJobSearch   := qryJobSearch ||
                        mpnet_email_db.getContainsClause('INDUSTRYSECTOR',
                                                         cur_cja_aux.jobindustry,
                                                         'AND');
    end if;

    if cur_cja_aux.jobtitle is not null then
       --dbms_output.put_line('Has Job Title');
      criteriaExists := true;
      qryJobSearch   := qryJobSearch || '(' ||
                        mpnet_email_db.getContainsClause('JOBTITLE',
                                                         cur_cja_aux.jobtitle,
                                                         'OR') ||
                        mpnet_email_db.getContainsClause('JOBDESCRIPTION',
                                                         cur_cja_aux.jobtitle,
                                                         '') || ') AND';
      --dbms_output.put_line('after job title ');

    end if;

    if cur_cja_aux.candidateskills is not null then
      criteriaExists := true;
      qryJobSearch   := qryJobSearch ||
                        mpnet_email_db.getContainsClause('CANDIDATESKILLS',
                                                         cur_cja_aux.candidateskills,
                                                         'AND');
    end if;

    -- location
    if (cur_cja_aux.joblocation is not null and
       cur_cja_aux.jobproximity is null) then
      criteriaExists := true;
      
      qryRegionsSearch := 'select region.* from regions region WHERE region.lang = '  
                       || mpnet_email_db.getLiteralString(cur_cja_aux.joblanguage)
                       || ' and region.country_code = ' || mpnet_email_db.getLiteralString(cur_cja_aux.jobcountry)
                       || ' and lower(region.prefered_location) = lower(' || mpnet_email_db.getLiteralString(cur_cja_aux.joblocation) || ')';
      
      open cur_region for qryRegionsSearch;
 
      loop
  		 	fetch cur_region
  		        into cur_region_aux;
       	exit when cur_region%notfound;
        
        LOCATION_CODE := cur_region_aux.location_code;
        LOCATION_NAME := cur_region_aux.prefered_location;
      end loop; 
          
      close cur_region;
      
      
      if (LOCATION_CODE is not null and
       length(trim(LOCATION_CODE)) > 0) then
        qryJobSearch   := qryJobSearch ||
                          'LOCATION in (''' || cur_cja_aux.joblocation || ''',''' || LOCATION_CODE || ''') AND';
      else
        qryJobSearch   := qryJobSearch ||
                          mpnet_email_db.getContainsClause('LOCATION',
                                                           cur_cja_aux.joblocation,
                                                           'AND');
      end if;

    end if;

    -- proximity search
    -- jobproximityunit is not used in MPNet 2.3
    if (cur_cja_aux.jobproximity is not null and
       length(trim(cur_cja_aux.jobproximity)) > 0 and
       cur_cja_aux.jobcountry is not null and
       length(trim(cur_cja_aux.jobcountry)) > 0 and
       cur_cja_aux.joblocation is not null and
       length(trim(cur_cja_aux.joblocation)) > 0) then

      mpnet_email_db.getGeoLocation(cur_cja_aux.jobcountry,
                                    cur_cja_aux.joblocation,
                                    lat_out,
                                    lon_out);

      -- only add zipdistance clause when lat/lon values exist
      if (lat_out is not null and lon_out is not null) then
         criteriaExists := true;

         -- remove any unit from jobproximity
         if  instr(upper(cur_cja_aux.jobproximity),'KM') > 0 then
      	     proximity := trim(substr(cur_cja_aux.jobproximity,1,instr(upper(cur_cja_aux.jobproximity),'KM')-1));
             
             qryJobSearch := qryJobSearch || ' zipdistance.DISTCHECK(' ||
                        lat_out || ',' || lon_out ||
                        ', lat_coordinate, lon_coordinate ,''KM'') < ' ||
                        proximity || ' AND';
         else
             proximity := trim(substr(cur_cja_aux.jobproximity,1,instr(upper(cur_cja_aux.jobproximity),'MI')-1));
             
             qryJobSearch := qryJobSearch || ' zipdistance.DISTCHECK(' ||
                        lat_out || ',' || lon_out ||
                        ', lat_coordinate, lon_coordinate ,''MI'') < ' ||
                        proximity || ' AND';
         end if;
     end if;

    end if;

    -- email sent date
		if cur_cja_aux.agentemailsentdate is not null then
			criteriaExists := true;
			qryJobSearch   := qryJobSearch ||
    												' trunc(PUBLICATIONDATE) >= trunc(to_date(''' || cur_cja_aux.agentemailsentdate || ''',''DD-MON-YY'')) AND';
    
    end if;



    --TESTING: uncomment to check sql
    /*
    dbms_output.put_line('agent='|| cur_cja_aux.agentname || ' email to: '|| cur_cja_aux.correspondemail);
    dbms_output.put_line('before proximity sql');
    dbms_output.put_line('prox='||cur_cja_aux.jobproximity
    || ' loc='||cur_cja_aux.joblocation
    || ' country='||cur_cja_aux.jobcountry);
    */
    

    -- finally, add the last part for row limit and ordering

    if (length(qryJobSearch) > 0 and criteriaExists = true) then

      qryJobSearch      := 'SELECT ADVS.* FROM ADVERTISEMENTS ADVS INNER JOIN SITES ON ADVS.SITE_ID = SITES.ID WHERE SITES.ID = <siteID> AND '||
                           substr(qryJobSearch, 1, length(qryJobSearch) - 4);

      qryJobSearch:= replace(qryJobSearch,'<siteID>', mpnet_email_db.getLiteralString(cur_cja_aux.site_id));
      
            
     open cur_cja_name for
	    select vja.*
      from v_candidatejobagent vja
	    WHERE vja.candidate_id = cur_cja_aux.candidate_id
      order by vja.agentname;

     loop
		 	fetch cur_cja_name
		        into cur_cja_name_aux;
     	exit when cur_cja_name%notfound;

     	AGENT_NAMES := AGENT_NAMES || cur_cja_name_aux.agentname || mpnet_email_format.sglspc;

     end loop;

		 countJobAgents:= cur_cja_name%rowcount;

     close cur_cja_name;


    else
      qryJobSearch      := 'SELECT ADVS.* FROM ADVERTISEMENTS ADVS INNER JOIN SITES ON ADVS.SITE_ID = SITES.ID WHERE SITES.ID = <siteID> ';

      qryJobSearch:= replace(qryJobSearch,'<siteID>', mpnet_email_db.getLiteralString(cur_cja_aux.site_id));

    end if;

      for I in 1..lookup_tab.count loop

          if (lookup_tab(I).lang = cur_cja_aux.joblanguage) then

            if (lookup_tab(I).lookup_name = 'contractType')
               and (lookup_tab(I).value_code = cur_cja_aux.contracttype)
            then
               CONTRACTTYPE:=lookup_tab(I).lookup_description;
            end if;

            if (lookup_tab(I).lookup_name = 'frequency')
               and (lookup_tab(I).value_code = cur_cja_aux.frequency)
            then
               FREQUENCY:=lookup_tab(I).lookup_description;
            end if;

          end if;

      end loop;

      I:=0; -- reset for next loop

      -- set resource based on language
      for I in 1..emailresource_tab.count loop

          if emailresource_tab(I).language = cur_cja_aux.joblanguage then
            if emailresource_tab(I).message_id = 'SUBJECT_IN' then
               SUBJECT_IN:= emailresource_tab(I).message_text;
            end if;

            if emailresource_tab(I).message_id = 'SENDER_IN' then
               SENDER_IN:= emailresource_tab(I).message_text;
            end if;

            if emailresource_tab(I).message_id = 'FOOTER1' then
               FOOTER1:= emailresource_tab(I).message_text;
            end if;

            if emailresource_tab(I).message_id = 'CLOSING1' then
               CLOSING1:= emailresource_tab(I).message_text;
            end if;

            if emailresource_tab(I).message_id = 'CLOSING2' then
               CLOSING2:= emailresource_tab(I).message_text;
            end if;

            if emailresource_tab(I).message_id = 'SIGNATURE' then
               SIGNATURE:= emailresource_tab(I).message_text;
            end if;

            if emailresource_tab(I).message_id = 'AGENTDETAIL' then
               AGENTDETAIL:= emailresource_tab(I).message_text;
            end if;

            if emailresource_tab(I).message_id = 'SRESULT' then
               SRESULT:= emailresource_tab(I).message_text;
            end if;

            if emailresource_tab(I).message_id = 'URL_PRIVACY' then
               URL_PRIVACY:= emailresource_tab(I).message_text;
            end if;
            
            if emailresource_tab(I).message_id = 'URL_PRIVACY_LABEL' then
               URL_PRIVACY_LABEL:= emailresource_tab(I).message_text;
            end if;

            if emailresource_tab(I).message_id = 'URL_IMPROVEFORM' then
               URL_IMPROVEFORM:= emailresource_tab(I).message_text;
            end if;

            if emailresource_tab(I).message_id = 'URL_IMPROVEFORM_LABEL' then
               URL_IMPROVEFORM_LABEL:= emailresource_tab(I).message_text;
            end if;

            if emailresource_tab(I).message_id = 'URL_MYMANPOWER' then
               URL_MYMANPOWER:= emailresource_tab(I).message_text;
            end if;
            
            if emailresource_tab(I).message_id = 'URL_MYMANPOWER_LABEL' then
               URL_MYMANPOWER_LABEL:= emailresource_tab(I).message_text;
            end if;
            
            if emailresource_tab(I).message_id = 'LARGE_COUNT' then
               LARGE_COUNT:= emailresource_tab(I).message_text;
            end if;

            if emailresource_tab(I).message_id = 'URL_ADVERT' then
               URL_ADVERT:= emailresource_tab(I).message_text;
            end if;
            
            if emailresource_tab(I).message_id = 'LOCATION_HEADER' then
	             LOCATION_HEADER:= emailresource_tab(I).message_text;
            end if;
            
            if emailresource_tab(I).message_id = 'TITLE_HEADER' then
	    	       TITLE_HEADER:= emailresource_tab(I).message_text;
            end if;
            
            if emailresource_tab(I).message_id = 'COMPANY_HEADER' then
	    	       COMPANY_HEADER:= emailresource_tab(I).message_text;
            end if;
            
            if emailresource_tab(I).message_id = 'IMAGE_NAME' then
	    	       IMAGE_NAME:= emailresource_tab(I).message_text;
            end if;
            
            if emailresource_tab(I).message_id = 'SITE_URL' then
	    	       URL_IMAGE:= emailresource_tab(I).message_text;
            end if;

          end if;
      end loop;
      
      -- Execute job search query
      
      -- Loop through the results to get number of jobs to send .. if > 40 then add message
      
      qryJobSearchCount := qryJobSearch || 'and rownum < 42';
      
      /*
      dbms_output.put_line('Stataement 1 = ' || substr(qryJobSearch,1,225));
      dbms_output.put_line('Stataement 2 = ' || substr(qryJobSearch,226,450));
      dbms_output.put_line('Stataement 3 = ' || substr(qryJobSearch,450,650));      
      */      

      open cur_results for qryJobSearchCount;
           loop
    					fetch cur_results
    						into cur_results_rec;
    					exit when cur_results%notfound;
            end loop;
      
      vacancies:= cur_results%rowcount;
      close cur_results;

      --dbms_output.put_line('Agent id = ' || cur_cja_aux.id || 'has a vacancy count = ' || vacancies);
      if vacancies > 0 then
        qryJobSearch:= qryJobSearch || ' AND ' || ROWLIMIT || ORDERBYDATE;
        resultCount := 1;
        
        open cur_results for qryJobSearch;
  				loop
  					fetch cur_results
  						into cur_results_rec;
  					exit when cur_results%notfound;

            if cur_results_rec.loc_freeform = 'N' then
               qryRegionsResult := 'select region.* from regions region WHERE region.lang = '  
                       || mpnet_email_db.getLiteralString(cur_cja_aux.joblanguage)
                       || ' and region.country_code = ' || mpnet_email_db.getLiteralString(cur_cja_aux.jobcountry)
                       || ' and lower(region.location_code) = lower(' || mpnet_email_db.getLiteralString(cur_results_rec.location) || ')';

               open cur_region_results for qryRegionsResult;
     
              loop
          		 	fetch cur_region_results
          		        into cur_region_results_aux;
               	exit when cur_region_results%notfound;
                
                regionName := cur_region_results_aux.prefered_location;
              end loop; 
                  
              close cur_region_results;
            end if;

              if cur_cja_aux.contenttype = 'TEXT' then            
                if (regionName is not null and length(trim(regionName)) > 0) then
                   tmptext:=replace(SRESULT,'<location>', regionName);
                else
                   tmptext:=replace(SRESULT,'<location>', cur_results_rec.location);
                end if;
      					tmptext:=replace(tmptext, '<dblsp>', mpnet_email_format.sglspc);
         				tmptext:=replace(tmptext,'<jobtitle>', mpnet_email_format.getHrefLink(URL_ADVERT ||cur_results_rec.advertisementid, cur_results_rec.jobtitle));
      					tmptext:= tmptext ||
      										mpnet_email_format.dblspc;
      
      					msgtext:= msgtext || tmptext;
             else
                 select mod(resultCount,2) 
                 	into modValue
                  from dual;

                  if modValue = 1 then
                     tmptext := '<TR bgcolor="#ebebeb"><TD>&nbsp;';
                  else
                     tmptext := '<TR bgcolor="#FFFFFF"><TD>&nbsp;';
                  end if;
                  
                 if (regionName is not null and length(trim(regionName)) > 0) then
                    tmptext:=tmptext || regionName || '</TD>';
                 else
                    tmptext:=tmptext || cur_results_rec.location || '</TD>';
                 end if;
                 
                 tmptext:= tmptext || '<TD>&nbsp;' || mpnet_email_format.getHrefLink(URL_ADVERT ||cur_results_rec.advertisementid, cur_results_rec.jobtitle) || '</TD>';
                 tmptext:= tmptext || '<TD>&nbsp;' || cur_results_rec.clientname || '</TD></TR>';
             
                 msgtext:= msgtext || tmptext;
                 resultCount := resultCount + 1;
             end if;
             qryRegionsResult := null;
             regionName:= null;
  
  				end loop; -- job advertisements
        close cur_results;
   
        if cur_cja_aux.contenttype = 'HTML' then
          
           msgtext:= tableStart || 
                     '<TR bgcolor="#C8504F"><TD><span style="color:white;padding:4px">' || LOCATION_HEADER || 
                     '</span></TD><TD><span style="color:white;padding:4px">' || TITLE_HEADER || '</span></TD><TD><span style="color:white;padding:4px">' || COMPANY_HEADER || 
                     '</span></TD></TR>' || msgtext || '</TABLE>';

        end if;
  
     
         -- job agent detail
        tmptext:= replace(AGENTDETAIL, '<firstname>', cur_cja_aux.firstname || ',' || mpnet_email_format.dblspc); 
        tmptext:= replace(tmptext, '<numAgents>', countJobAgents);
        tmptext:= replace(tmptext, '<agents>', mpnet_email_format.dblspc || AGENT_NAMES || mpnet_email_format.sglspc);
        tmptext:= replace(tmptext, '<agentName>', '<B>' || cur_cja_aux.agentname || '</B>');

        
        if vacancies > 40 then
           tmptext:= tmptext || mpnet_email_format.sglspc || LARGE_COUNT;
					 tmptext:=replace(tmptext,'<mymanpowerlink>','<a href="' || URL_MYMANPOWER ||'">' || URL_MYMANPOWER_LABEL || '</a>');
        end if;
        
        msgtext:= '<img SRC="' || URL_IMAGE || '/GetEmailImage?image=' || IMAGE_NAME ||'"><BR><BR>' 
                  || tmptext
                  || mpnet_email_format.dblspc
                  || msgtext
                  || mpnet_email_format.dblspc;


        tmptext:=CLOSING1 ||
                         mpnet_email_format.dblspc ||
                 CLOSING2 ||
                         mpnet_email_format.dblspc ||
                 SIGNATURE ||
                         mpnet_email_format.dblspc ||
                         mpnet_email_format.hrule ||
                         mpnet_email_format.dblspc ||
                 FOOTER1;

        msgtext:= msgtext || tmptext;

        --mpnet_email_db.writeLog('complete msgtext before replace',msgtext);

        msgtext:= replace(msgtext, '<dblspc>', mpnet_email_format.dblspc);

        /* ===== ADD URL LINKS ===== */
       
           msgtext:= replace(msgtext, '<improvelink>', mpnet_email_format.getHrefLink(URL_IMPROVEFORM, URL_IMPROVEFORM_LABEL));
           msgtext:= replace(msgtext, '<privacylink>', mpnet_email_format.getHrefLink(URL_PRIVACY, URL_PRIVACY_LABEL));

        /* ===== IF TEXT FORMAT REQUESTED, REPLACE HTML FORMATTING TAGS ===== */

        if (TESTING) then
          mpnet_email_db.writeLog('*TEST MODE* format: '|| cur_cja_aux.contenttype
            || ' msgtext after email: '|| cur_cja_aux.correspondemail
            || ' agent:'|| cur_cja_aux.agentname,'agent id' || cur_cja_aux.id || 'SQL = ' || qryJobSearch || ' message = ' || msgtext);
        else

          /* ============================================ */
          /* ========== START EMAIL PROCESSING ========== */
          /* ============================================ */

          --dbms_output.put_line('email processing...');

          mime_type_in:= 'text/html; charset="UTF-8"';
          
          SUBJECT_IN := replace(SUBJECT_IN,'<jobagentname>',cur_cja_aux.agentname);
          conn := demo_mail.begin_mail(sender     => SENDER_IN,
                                       recipients => cur_cja_aux.correspondemail,
                                       subject    => SUBJECT_IN,
                                       mime_type  => mime_type_in,
                                       priority   => priority_in);

          demo_mail.write_mb_text(conn    => conn,
                                  message => mpnet_email_format.brandFont);

          demo_mail.write_mb_text(conn    => conn,
                                  message => msgtext);

          demo_mail.end_mail(conn); --send the email
          
          
          
       end if;
    end if;

    exception
       --when utl_smtp.transient_error then
       --  mpnet_email_db.writeLog('SMTP failure: code '||utl_smtp.transient_error_errcode, 'Code: '|| SQLCODE ||' Message: '|| SQLERRM);
       when others then
         mpnet_email_db.writeLog('Unknown exception','ID: '||to_char(cur_cja_aux.id)||' Code: '|| SQLCODE ||' Message: '|| SQLERRM );
    end; -- end of exception handled code block


    --- Update the email last sent timestamp MStoffel
    update CANDIDATEJOBAGENTS
    SET agentemailsentdate = sysdate
    where CANDIDATEJOBAGENTS.id = cur_cja_aux.id;
    

  end loop;
  close cur_cja;
  exception
     when utl_smtp.transient_error then
        mpnet_email_db.writeLog('SMTP failure: code '||utl_smtp.transient_error_errcode, 'Code: '|| SQLCODE ||' Message: '|| SQLERRM);
     when others then
         mpnet_email_db.writeLog('Unknown exception','Code: '|| SQLCODE ||' Message: '|| SQLERRM );

end mpnet_jobagent;
/
 CREATE OR REPLACE PROCEDURE  "MPNET_JOBAGENT_WRAPPER" (in_frequency in char) is

       cursor cur_email_cntrl is
          select *
          from email_control cntrl
          where cntrl.active = 'Y';

       cur_email_cntrl_aux cur_email_cntrl%rowtype;

begin
 
  open cur_email_cntrl;

  loop
    fetch cur_email_cntrl
      into cur_email_cntrl_aux;
    exit when cur_email_cntrl%notfound; 
    
    MPNET_JOBAGENT(cur_email_cntrl_aux.site_id,in_frequency);
    
  end loop;
 
end MPNET_JOBAGENT_WRAPPER;
/
 CREATE OR REPLACE PROCEDURE  "MPNET_JOB_OT_OPTIDX" (jobno1 in number) is

  jobno  number := jobno1;
  jobno2 number := jobno1 + 1;
  jobno3 number := jobno2 + 1;
BEGIN

  -- To run everynight at midnight
  dbms_job.submit(jobno,
                  'optidx_advertisements_prc;',
                  TRUNC(SYSDATE, 'DD'),
                  'TRUNC(SYSDATE+1,''DD'')');
                  
  dbms_job.submit(jobno2,
                  'optidx_geolocation_prc;',
                  TRUNC(SYSDATE, 'DD'),
                  'TRUNC(SYSDATE+1,''DD'')');
                  
  dbms_job.submit(jobno3,
                  'optidx_resumes_prc;',
                  TRUNC(SYSDATE, 'DD'),
                  'TRUNC(SYSDATE+1,''DD'')');                  
                    
  /*
  -- run every 2 hrs
  DBMS_JOB.SUBMIT(jobno,
                 'optidx_advertisements_prc;',
                  SYSDATE,
                 TRUNC(LEAST(NEXT_DAY(SYSDATE,''MONDAY''),
                 NEXT_DAY(SYSDATE,''TUESDAY''),
                 NEXT_DAY(SYSDATE,''WEDNESDAY''),
                 NEXT_DAY(SYSDATE,''THURSDAY''),
                 NEXT_DAY(SYSDATE,''FRIDAY'') )) + 6/24);
  -- run every 4 hrs
  DBMS_JOB.SUBMIT(jobno2,
                 'optidx_geolocation_prc;',
                  SYSDATE,
                 TRUNC(LEAST(NEXT_DAY(SYSDATE,''MONDAY''),
                 NEXT_DAY(SYSDATE,''TUESDAY''),
                 NEXT_DAY(SYSDATE,''WEDNESDAY''),
                 NEXT_DAY(SYSDATE,''THURSDAY''),
                 NEXT_DAY(SYSDATE,''FRIDAY'') )) + 6/24);
  DBMS_JOB.SUBMIT(jobno3,
                 'optidx_resumes_prc;',
                  sysdate,
                 TRUNC(LEAST(NEXT_DAY(SYSDATE,''MONDAY''),
                 NEXT_DAY(SYSDATE,''TUESDAY''),
                 NEXT_DAY(SYSDATE,''WEDNESDAY''),
                 NEXT_DAY(SYSDATE,''THURSDAY''),
                 NEXT_DAY(SYSDATE,''FRIDAY'') )) + 6/24);
  */
  commit;
END;
/
 CREATE OR REPLACE PROCEDURE  "MPNET_JOB_OT_SYNC" (jobno1 in number) is

 jobno number:=jobno1;
BEGIN
  -- run every 2 hrs
  DBMS_JOB.SUBMIT(jobno,'update_advertisements_prc;',SYSDATE,
    'sysdate + 2/24');
  -- run every 4 hrs
  DBMS_JOB.SUBMIT(jobno,'update_geolocation_prc;',SYSDATE,
    'sysdate + 4/24');
  commit;
END;
/
 CREATE OR REPLACE PROCEDURE  "MPNET_JOB_RESUME_OPT_FAST" (jobno1 in number) is

 jobno number:=jobno1;
BEGIN
  DBMS_JOB.SUBMIT(jobno,'optidx_resumes_prc_fast;',SYSDATE,
    'sysdate + 2/24');
  commit;
END;
/
 CREATE OR REPLACE PROCEDURE  "MPNET_JOB_RESUME_SYNC" (jobno1 in number) is

 jobno number:=jobno1;
BEGIN
  DBMS_JOB.SUBMIT(jobno,'updated_candidateresumes_prc;',SYSDATE,
    'sysdate + 2/24');
  commit;
END;
/
 CREATE OR REPLACE PROCEDURE  "OPTIDX_ADVERTISEMENTS_PRC" is
begin
  ctx_ddl.OPTIMIZE_INDEX('advertisements_xjobtitle','FULL');
  ctx_ddl.OPTIMIZE_INDEX('advertisements_xjobdesc','FULL');
  ctx_ddl.OPTIMIZE_INDEX('advertisements_xcanskills','FULL');
  ctx_ddl.OPTIMIZE_INDEX('advertisements_xlocation','FULL');
  ctx_ddl.OPTIMIZE_INDEX('advertisements_xindus','FULL');
  commit;
end;
/
 CREATE OR REPLACE PROCEDURE  "OPTIDX_GEOLOCATION_PRC" is
begin
  ctx_ddl.OPTIMIZE_INDEX('geolocation_xmunicipality','FULL');
  commit;
end;
/
 CREATE OR REPLACE PROCEDURE  "OPTIDX_RESUMES_PRC" is
begin
  ctx_ddl.OPTIMIZE_INDEX('candidateresumes_xresume','FULL');
  commit;
end;
/
 CREATE OR REPLACE PROCEDURE  "OPTIDX_RESUMES_PRC_FAST" is
begin
  ctx_ddl.OPTIMIZE_INDEX('candidateresumes_xresume','FAST');
  commit;
end;
/
 CREATE OR REPLACE PROCEDURE  "UPDATED_CANDIDATERESUMES_PRC" IS
   PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  ctx_ddl.sync_index('mpnetadmin.candidateresumes_xresume');
  commit;
END;
/
 CREATE OR REPLACE PROCEDURE  "UPDATE_ADVERTISEMENTS_PRC" IS
   PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  ctx_ddl.sync_index('mpnetadmin.advertisements_xjobtitle','50M');
  ctx_ddl.sync_index('mpnetadmin.advertisements_xjobdsc','50M');
  ctx_ddl.sync_index('mpnetadmin.advertisements_xcanskills','50M');
  ctx_ddl.sync_index('mpnetadmin.advertisements_xlocation','50M'); 
  ctx_ddl.sync_index('mpnetadmin.advertisements_xindus','50M');
  ctx_ddl.sync_index('mpnetadmin.advertisements_xcprofile','50M'); 
  commit;
END;
/
 CREATE OR REPLACE PROCEDURE  "UPDATE_GEOLOCATION_PRC" IS
   PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
  ctx_ddl.sync_index('mpnetadmin.geolocation_xmunicipality');
  commit;
end UPDATE_GEOLOCATION_PRC;
/
 CREATE OR REPLACE PROCEDURE  "UPDATE_LOCATIONNAMES_PRC" is
PRAGMA AUTONOMOUS_TRANSACTION;
begin
  ctx_ddl.sync_index('mpnetadmin.xlocationnames');
  commit;
end;
/
 CREATE OR REPLACE PROCEDURE  "UPDATE_REGIONS_PRC" is
PRAGMA AUTONOMOUS_TRANSACTION;
begin
  ctx_ddl.sync_index('mpnetadmin.REGIONS_XPREFERREDLOC');
  commit;
end;
/
 

 CREATE SEQUENCE   "ADDRESSES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 18931 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "ADVERTISEMENTCONTACTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 23726 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "ADVERTISEMENTPUBLICATIONS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10000 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "ADVERTISEMENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 20133 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "BRANCHES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 16586 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CANDIDATECOVERLETTERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 11779 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CANDIDATEEDUCATIONS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 12287 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CANDIDATEJOBAGENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 13310 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CANDIDATEJOBAPPLICATIONS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 12922 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CANDIDATEJOBHISTORIES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 12466 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CANDIDATEPREFERENCES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 18763 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CANDIDATEREFERENCES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 12174 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CANDIDATERESUMES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 20005 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CANDIDATESAVEJOBS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 11463 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CANDIDATESKILLS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 14035 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CANDIDATES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 20527 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CAREERHARMONY_SEQ"  MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1 START WITH 786 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CONFIGURATION_SEQ"  MINVALUE 1 MAXVALUE 9999 INCREMENT BY 1 START WITH 113 CACHE 5 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CONSENT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4109 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "COUNTRYLOCATIONS_SEQ"  MINVALUE 0 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 2831 CACHE 5 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "DOMAINVALUES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10000 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "EDUCATIONDEGREES_SEQ"  MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1 START WITH 81 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "EMAILS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 16199 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "EMAIL_LOG_SEQ"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 11439 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "EMAIL_RESOURCE_SEQ"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 860 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "GEOLOCATION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121924 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "LOCATIONNAMES_SEQ"  MINVALUE 0 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 8441 CACHE 5 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "LOOKUP_VALUES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 92917 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "LOOKUP_VALUE_SEQ"  MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1 START WITH 10010 CACHE 5 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "LOSTCANDIDATES_SEQ"  MINVALUE 0 MAXVALUE 99999 INCREMENT BY 1 START WITH 167 CACHE 5 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "OTHER_CANDIDATE_DETAILS_SEQ"  MINVALUE 0 MAXVALUE 99999999 INCREMENT BY 1 START WITH 3332 CACHE 5 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "PHONES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21096 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "POSTAL_CODE_CAMPUS_SEQ"  MINVALUE 1 MAXVALUE 999999999 INCREMENT BY 1 START WITH 584816 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "REGIONS_SEQ"  MINVALUE 1 MAXVALUE 99999 INCREMENT BY 1 START WITH 79646 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "REQUIREDSKILLS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10000 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "SEQ_ENUM_VALUES"  MINVALUE 0 MAXVALUE 99999 INCREMENT BY 1 START WITH 351 CACHE 5 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "SEQ_INDUSTRY_SECTORS"  MINVALUE 0 MAXVALUE 99999 INCREMENT BY 1 START WITH 41 CACHE 5 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "SEQ_JOB_TITLES_CODE"  MINVALUE 0 MAXVALUE 99999 INCREMENT BY 1 START WITH 756 CACHE 5 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "SEQ_PREFERRED_LOCATION"  MINVALUE 0 MAXVALUE 9999999 INCREMENT BY 1 START WITH 437 CACHE 5 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "SITES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10280 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "SKILLS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41220 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "STEERING_QUESTIONS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10020 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "T_IDENTITY_SEQ"  MINVALUE 1 MAXVALUE 999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "USERLOGINHISTORIES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 10000 CACHE 20 NOORDER  NOCYCLE
/

Rem No synonym found to generate DDL.

CREATE OR REPLACE TRIGGER  "ADDRESSES_BIR" 
before insert on MPNETADMIN.addresses
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "ADDRESSES_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "ADDRESSES_BUR" 
 before update on MPNETADMIN.addresses for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "ADDRESSES_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "ADVERTISEMENTCONTACTS_BIR" 
before insert on MPNETADMIN.advertisementcontacts
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "ADVERTISEMENTCONTACTS_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "ADVERTISEMENTCONTACTS_BUR" 
 before update on MPNETADMIN.advertisementcontacts for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "ADVERTISEMENTCONTACTS_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "ADVERTISEMENTPUBLICATIONS_BIR" 
before insert on MPNETADMIN.advertisementpublications
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "ADVERTISEMENTPUBLICATIONS_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "ADVERTISEMENTPUBLICATIONS_BUR" 
 before update on MPNETADMIN.advertisementpublications for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "ADVERTISEMENTPUBLICATIONS_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "ADVERTISEMENTS_BIR" 
before insert on MPNETADMIN.advertisements
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "ADVERTISEMENTS_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "ADVERTISEMENTS_BUR" 
 before update on MPNETADMIN.advertisements for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "ADVERTISEMENTS_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "BRANCHES_BIR" 
before insert on MPNETADMIN.branches
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "BRANCHES_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "BRANCHES_BUR" 
 before update on MPNETADMIN.branches for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "BRANCHES_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "CANDIDATEEDUCATIONS_BIR" 
before insert on MPNETADMIN.candidateeducations
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "CANDIDATEEDUCATIONS_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "CANDIDATEEDUCATIONS_BUR" 
 before update on MPNETADMIN.candidateeducations for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "CANDIDATEEDUCATIONS_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "CANDIDATEJOBHISTORIES_BIR" 
before insert on MPNETADMIN.candidatejobhistories
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "CANDIDATEJOBHISTORIES_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "CANDIDATEJOBHISTORIES_BUR" 
 before update on MPNETADMIN.candidatejobhistories for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "CANDIDATEJOBHISTORIES_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "CANDIDATEPREFERENCES_BIR" 
before insert on MPNETADMIN.candidatepreferences
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "CANDIDATEPREFERENCES_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "CANDIDATEPREFERENCES_BUR" 
 before update on MPNETADMIN.candidatepreferences for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "CANDIDATEPREFERENCES_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "CANDIDATEREFERENCES_BIR" 
before insert on MPNETADMIN.candidatereferences
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "CANDIDATEREFERENCES_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "CANDIDATEREFERENCES_BUR" 
 before update on MPNETADMIN.candidatereferences for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "CANDIDATEREFERENCES_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "CANDIDATESAVEJOBS_BIR" 
before insert on MPNETADMIN.candidatesavejobs
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "CANDIDATESAVEJOBS_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "CANDIDATESAVEJOBS_BUR" 
 before update on MPNETADMIN.candidatesavejobs for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "CANDIDATESAVEJOBS_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "CANDIDATESKILLS_BIR" 
before insert on MPNETADMIN.candidateskills
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "CANDIDATESKILLS_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "CANDIDATESKILLS_BUR" 
 before update on MPNETADMIN.candidateskills for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "CANDIDATESKILLS_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "CANDIDATES_BIR" 
before insert on MPNETADMIN.candidates
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "CANDIDATES_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "CANDIDATES_BUR" 
 before update on MPNETADMIN.candidates for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "CANDIDATES_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "EMAILCONTROL_BIR" 
before insert on MPNETADMIN.email_control
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;



/
ALTER TRIGGER  "EMAILCONTROL_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "EMAILCONTROL_BUR" 
 before update on MPNETADMIN.email_control for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;



/
ALTER TRIGGER  "EMAILCONTROL_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "EMAILS_BIR" 
before insert on MPNETADMIN.emails
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "EMAILS_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "EMAILS_BUR" 
 before update on MPNETADMIN.emails for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "EMAILS_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "GEOLOCATION_BIR" 
before insert on MPNETADMIN.geolocation
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "GEOLOCATION_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "GEOLOCATION_BUR" 
 before update on MPNETADMIN.geolocation for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "GEOLOCATION_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "LOOKUP_VALUES_BIR" 
before insert on MPNETADMIN.lookup_values
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "LOOKUP_VALUES_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "LOOKUP_VALUES_BUR" 
 before update on MPNETADMIN.lookup_values for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "LOOKUP_VALUES_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "LOSTCANDIDATES_BIR" 
before insert on lostcandidates
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "LOSTCANDIDATES_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "LOSTCANDIDATES_BUR" 
 before update on lostcandidates for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "LOSTCANDIDATES_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "PHONES_BIR" 
before insert on MPNETADMIN.phones
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "PHONES_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "PHONES_BUR" 
 before update on MPNETADMIN.phones for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "PHONES_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "REQUIREDSKILLS_BIR" 
before insert on MPNETADMIN.requiredskills
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "REQUIREDSKILLS_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "REQUIREDSKILLS_BUR" 
 before update on MPNETADMIN.requiredskills for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "REQUIREDSKILLS_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "SITES_BIR" 
before insert on MPNETADMIN.sites
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "SITES_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "SITES_BUR" 
 before update on MPNETADMIN.sites for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "SITES_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "SKILLS_BIR" 
before insert on MPNETADMIN.skills
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "SKILLS_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "SKILLS_BUR" 
 before update on MPNETADMIN.skills for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "SKILLS_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "STEERING_QUESTIONS_BIR" 
before insert on MPNETADMIN.steering_questions
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "STEERING_QUESTIONS_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "STEERING_QUESTIONS_BUR" 
 before update on MPNETADMIN.steering_questions for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "STEERING_QUESTIONS_BUR" ENABLE
/
CREATE OR REPLACE TRIGGER  "USERLOGINHISTORIES_BIR" 
before insert on MPNETADMIN.userloginhistories
for each row
declare
begin
    :new.created_on := sysdate;
    :new.created_by := user;
    :new.changed_on:=sysdate;
    :new.changed_by:= user;
end;

/
ALTER TRIGGER  "USERLOGINHISTORIES_BIR" ENABLE
/
CREATE OR REPLACE TRIGGER  "USERLOGINHISTORIES_BUR" 
 before update on MPNETADMIN.userloginhistories for each row
begin
        :new.changed_on:=sysdate;
        :new.changed_by:= USER;
end;

/
ALTER TRIGGER  "USERLOGINHISTORIES_BUR" ENABLE
/

CREATE OR REPLACE FORCE VIEW  "V_BRANCHES" ("BRANCH_ID", "SITE_ID", "CODE", "BRANCHNAME", "STREET", "ADDRESS1", "ADDRESS2", "STATE", "PREFERED_LOCATION", "SPECIALITY", "EMAIL", "PHONENUMBER", "FAXNUMBER", "POSTALCODE", "COUNTRY", "CITY", "LOCATION_INFO", "OPERATION_HOURS", "ADDITIONAL_INFO", "LANG") AS 
  SELECT B.ID BRANCH_ID,
       SITE_ID,
       B.CODE,
        B.BRANCHNAME,
        B.STREET STREET,
        B.ADDRESS1 ADDRESS1,
        B.ADDRESS2 ADDRESS2,
       B.STATE,
       B.CITY PREFERED_LOCATION,
       B.SPECIALITY SPECIALITY,
       B.EMAIL,
       B.PHONENUMBER,
       B.FAXNUMBER,
       B.POSTALCODE,
       B.COUNTRY,
       B.CITY,
       B.LOCATION_INFO,
       B.OPERATION_HOURS,
       B.ADDITIONAL_INFO,
       LANG
FROM   BRANCHES B
/
CREATE OR REPLACE FORCE VIEW  "V_CANDIDATEAPPLICATIONS" ("APPLICAION_ID", "RESUME_ID", "CANDIDATE_ID", "FIRSTNAME", "LASTNAME", "DATEAPPLIED", "TESTTAKEN", "TEST_SCORE", "LENS_SCORE", "ADVERTISEMENT_ID", "ADVERTISEMENT_NUMBER", "CONTACT_BY_EMAIL", "CANDIDATE_EMAIL", "BRANCH_ID", "BRANCH_CITY", "BRANCHNAME", "BRANCH_ADDRESS1", "BRANCH_ADDRESS2", "BRANCH_STATE", "BRANCH_COUNTRY", "BRANCH_POSTALCODE", "BRANCH_PHONE", "BRANCH_FAX", "BRANCH_EMAIL", "BRANCH_LANGUAGE", "BRANCH_STREET", "SITE_COUNTRY", "SITE_ID", "RESUME_NAME", "LENS_ID", "RESUME") AS 
  select
    j.id "APPLICAION_ID",
    r.id "RESUME_ID",
    c.id "CANDIDATE_ID",
    c.firstname,
    c.lastname,
    j.dateapplied "DATEAPPLIED",
    j.testtaken TESTTAKEN,
    CASE WHEN j.testtaken is null THEN -1 when upper(j.testtaken) ='N' THEN 0 ELSE to_number(j.ch_score) END TEST_SCORE,
    to_number(j.bg_score) LENS_SCORE,
    a.advertisementid ADVERTISEMENT_ID,
    a.referencenumber "ADVERTISEMENT_NUMBER",
    c.contact_by_email,
    c.email "CANDIDATE_EMAIL",
    b.id BRANCH_ID,
    b.city "BRANCH_CITY", -- branches.city is used in the search
    b.branchname,
    b.address1 "BRANCH_ADDRESS1",
    b.address2 "BRANCH_ADDRESS2",
    b.state "BRANCH_STATE",
    b.country "BRANCH_COUNTRY",
    b.postalcode "BRANCH_POSTALCODE",
    b.phonenumber "BRANCH_PHONE",
    b.faxnumber "BRANCH_FAX",
    b.email "BRANCH_EMAIL",
    b.lang "BRANCH_LANGUAGE",
    b.street "BRANCH_STREET",
    -- TODO: possibly b.country, a new column..then we remove SITES
    -- from this view
    s.countrycode "SITE_COUNTRY",
    s.id site_id,
    r.name "RESUME_NAME",
    r.lens_id LENS_ID,
    r.resume
from         CANDIDATEJOBAPPLICATIONS J
INNER JOIN   ADVERTISEMENTS A ON A.ADVERTISEMENTID = J.ADVERTISEMENT_ID
INNER JOIN   ADVERTISEMENTCONTACTS AC ON A.ADVERTCONTACTID = AC.ADVERTCONTACTID
INNER JOIN   CANDIDATES C ON C.ID = J.CANDIDATE_ID
INNER JOIN   CANDIDATERESUMES R ON C.ID = R.CANDIDATE_ID
INNER JOIN   SITES s ON A.SITE_ID = S.ID
INNER JOIN   BRANCHES b ON AC.BRANCH_ID = B.ID
/
CREATE OR REPLACE FORCE VIEW  "V_CANDIDATEJOBAGENT" ("SITE_ID", "CORRESPONDEMAIL", "FIRSTNAME", "LASTNAME", "CREGLEVEL", "ID", "AGENTNAME", "JOBINDUSTRY", "JOBTITLE", "JOBCOUNTRY", "JOBPROXIMITY", "JOBPROXIMITYUNIT", "CONTRACTTYPE", "FREQUENCY", "LASTACTIVE", "USESKILL", "EXACTMATCH", "CANDIDATE_ID", "CONTENTTYPE", "SENDEMAIL", "JOBLOCATION", "JOBLANGUAGE", "CANDIDATESKILLS", "AGENTEMAILSENTDATE") AS 
  select
         c.site_id,
         decode(c.correspondemail,null,c.email,c.correspondemail) "CORRESPONDEMAIL",
         c.firstname,
         c.lastname,
         c.reg_level "CREGLEVEL",
         j.id,
         j.agentname,
         j.jobindustry,
         j.jobtitle,
         j.jobcountry,
         j.jobproximity,
         j.jobproximityunit,
         j.contracttype,
         j.frequency,
         j.lastactive,
         j.useskill,
         j.exactmatch,
         j.candidate_id,
         j.contenttype,
         j.sendemail,
         j.joblocation,
         j.joblanguage,
         j.candidateskills,
         j.agentemailsentdate
    from candidatejobagents j, candidates c
   where j.candidate_id = c.id
   and j.sendemail = 'Y'
/
CREATE OR REPLACE FORCE VIEW  "V_CANDIDATERESUMES" ("RESUME_ID", "CANDIDATE_ID", "FIRSTNAME", "LASTNAME", "CONTACT_BY_EMAIL", "CANDIDATE_EMAIL", "BRANCH_CITY", "BRANCHNAME", "BRANCH_ADDRESS1", "BRANCH_ADDRESS2", "BRANCH_STATE", "BRANCH_COUNTRY", "BRANCH_POSTALCODE", "BRANCH_PHONE", "BRANCH_FAX", "BRANCH_EMAIL", "SITE_COUNTRY", "RESUME_NAME", "RESUME") AS 
  select
    r.id "RESUME_ID",
    c.id "CANDIDATE_ID",
    c.firstname,
    c.lastname,
    c.contact_by_email,
    c.email "CANDIDATE_EMAIL",
    b.city "BRANCH_CITY", -- branches.city is used in the search
    b.branchname,
    b.address1 "BRANCH_ADDRESS1",
    b.address2 "BRANCH_ADDRESS2",
    b.state "BRANCH_STATE",
    b.country "BRANCH_COUNTRY",
    b.postalcode "BRANCH_POSTALCODE",
    b.phonenumber "BRANCH_PHONE",
    b.faxnumber "BRANCH_FAX",
    b.email "BRANCH_EMAIL",
    -- TODO: possibly b.country, a new column..then we remove SITES
    -- from this view
    s.countrycode "SITE_COUNTRY",
    r.name "RESUME_NAME",
    r.resume
from        SITES s
INNER JOIN  CANDIDATES C ON S.Id = C.SITE_ID
INNER JOIN  BRANCHES b ON C.BRANCH_ID = B.ID
INNER JOIN  CANDIDATERESUMES R ON C.ID = R.CANDIDATE_ID
/
CREATE OR REPLACE FORCE VIEW  "V_CANDIDATES" ("SITECODE", "CORRESPONDEMAIL", "REG_LEVEL", "FIRSTNAME", "LASTNAME", "GENDER", "NATIONALITY", "RESIDENCE_STATUS", "RESIDENCEPERMIT", "WORK_PERMIT", "WORKPERMITEXPDATE", "BIRTHDATE", "BIRTHPLACE", "NATIONALNUMBER") AS 
  SELECT s.sitecode, c.correspondemail, c.reg_level, c.firstname, c.lastname, g.lookup_description GENDER ,cntr.lookup_description NATIONALITY, rs.lookup_description RESIDENCE_STATUS, c.residencepermit, wp.lookup_description WORK_PERMIT, c.workpermitexpdate,
       c.birthdate, c.birthplace, c.nationalnumber
FROM CANDIDATES C
INNER JOIN SITES S ON C.SITE_ID = S.ID
LEFT OUTER JOIN (SELECT * FROM LOOKUP_VALUES WHERE LOOKUP_NAME ='nationality') cntr ON
      c.SITE_ID = cntr.SITE_ID AND C.Nationality = cntr.VALUE_CODE
left outer JOIN (SELECT * FROM LOOKUP_VALUES WHERE LOOKUP_NAME ='workPermit') wp ON
     c.SITE_ID = wp.SITE_ID AND C.Workpermits = wp.VALUE_CODE
left outer JOIN (SELECT * FROM LOOKUP_VALUES WHERE LOOKUP_NAME ='residenceStatus') rs ON
     c.SITE_ID = rs.SITE_ID AND C.Residencestatus = rs.VALUE_CODE
left outer JOIN (SELECT * FROM LOOKUP_VALUES WHERE LOOKUP_NAME ='gender') g ON
      c.SITE_ID = g.SITE_ID AND C.gender = g.VALUE_CODE
WHERE C.SITE_ID IN (10000, 10001)
/
CREATE OR REPLACE FORCE VIEW  "V_CANDIDATES_SKILLS" ("SITECODE", "EMAIL", "FIRSTNAME", "MIDDLENAME", "LASTNAME", "SKILLNAME", "LASTUSED", "LOOKUP_DESCRIPTION", "YEARSOFEXP") AS 
  SELECT  S.SITECODE, C.EMAIL, C.FIRSTNAME, C.MIDDLENAME, C.LASTNAME ,SK.SKILLNAME, CS.LASTUSED, V.LOOKUP_DESCRIPTION, YEARSOFEXP
FROM CANDIDATESKILLS CS
INNER JOIN SITES S ON CS.SITE_ID = S.ID
INNER JOIN CANDIDATES C ON CS.CANDIDATE_ID = C.ID
INNER JOIN (SELECT * FROM LOOKUP_VALUES WHERE LOOKUP_NAME = 'skillLevel') V ON
      CS.SITE_ID = V.SITE_ID AND CS.SKILLLEVEL = V.VALUE_CODE
INNER JOIN SKILLS SK ON CS.SKILLS_ID = SK.ID
WHERE CS.SITE_ID IN (10000, 10001)
/
CREATE OR REPLACE FORCE VIEW  "V_CANDIDATE_EDUCATION" ("SITECODE", "CORRESPONDEMAIL", "FIRSTNAME", "MIDDLENAME", "LASTNAME", "SCHOOLNAME", "CERTIFICATE_NAME", "EDUCATION_DEGREE", "CITY", "REGION", "COUNTRY") AS 
  SELECT s.sitecode, C.CORRESPONDEMAIL, C.FIRSTNAME, C.MIDDLENAME, C.LASTNAME,
       E.SCHOOLNAME,dl.lookup_description CERTIFICATE_NAME, ed.lookup_description EDUCATION_DEGREE,
       E.CITY, E.REGION,cn.lookup_description COUNTRY
FROM CANDIDATEEDUCATIONS E
INNER JOIN SITES S ON E.SITE_ID = S.ID
INNER JOIN CANDIDATES C ON E.CANDIDATE_ID = C.ID
LEFT OUTER JOIN (SELECT * FROM LOOKUP_VALUES WHERE LOOKUP_NAME = 'country') cn
     ON E.Country = cn.value_code and e.site_id = cn.site_id
LEFT OUTER JOIN (SELECT * FROM LOOKUP_VALUES WHERE LOOKUP_NAME = 'diplomaLevel') dl
     ON E.CERTIFICATENAME = dl.value_code and e.site_id = dl.site_id
LEFT OUTER JOIN (SELECT * FROM LOOKUP_VALUES WHERE LOOKUP_NAME = 'educationDegrees') ed
     ON E.DEGREECODE = ed.value_code and e.site_id = ed.site_id
WHERE E.SITE_ID IN (10000, 10001)
/
CREATE OR REPLACE FORCE VIEW  "V_CONFIGURATION" ("ID", "SITECODE", "CONDIDIONAL_BINDING", "VIEWABLE") AS 
  SELECT C.ID, S.SITECODE, C.CONDIDIONAL_BINDING, C.VIEWABLE
FROM   CONFIGURATION C
INNER JOIN SITES S ON C.SITE_ID = S.ID
/
CREATE OR REPLACE FORCE VIEW  "V_EMAILAGENT" ("ID", "SITE_ID", "FRIENDS_EMAIL", "FRIENDS_NAME", "MESSAGE", "SENDER_EMAIL", "TYPE", "SUBJECT", "FROM_LINE", "STATE", "ACTIVE") AS 
  select
    e.id,
    e.site_id,
    e.friends_email,
    e.friends_name,
    e.message,
    e.sender_email,
    e.type,
    e.subject,
    e.from_line,
    e.state,
    ec.active
    from email_control ec INNER JOIN emails e
ON ec.site_id = e.site_id
where ec.active = 'Y' and e.state = 'N'
/
CREATE OR REPLACE FORCE VIEW  "V_LANG_DOMAIN_VALUE" ("VALUE_ID", "SITECODE", "LANG", "LOOKUP_NAME", "VALUE_CODE", "VALUE_DESCRIPTION") AS 
  select c.value_id, s.sitecode, c.lang, c.lookup_name, c.value_code, c.value_description 
from domainvalues c
inner join sites s on c.site_id = s.id
/
CREATE OR REPLACE FORCE VIEW  "V_LOOKUP_VALUES" ("LOOKUP_ID", "SITECODE", "LANG", "LOOKUP_NAME", "VALUE_CODE", "LOOKUP_DESCRIPTION", "SORT_CODE") AS 
  SELECT L.LOOKUP_ID, S.SITECODE, L.LANG, L.LOOKUP_NAME, L.VALUE_CODE, L.LOOKUP_DESCRIPTION, L.SORT_CODE
FROM   LOOKUP_VALUES L
INNER JOIN SITES S ON L.SITE_ID = S.ID and value_code is not null and L.LANG IN (S.SITEFIRSTLANG, S.SITESECONDLANG , S.SITETHIRDLANG)
WHERE SITESTATUS = 'Y' AND UPPER(L.LOOKUP_NAME) not in ('JOBTITLE', 'LOCATIONS', 'DIPLOMALEVEL')
/
CREATE OR REPLACE FORCE VIEW  "V_RECRUITER_LOCATION_REPORT" ("CANDIDATE_ID", "FIRSTNAME", "LASTNAME", "MIDDLENAME", "RESUME_ID", "PREFERED_LOCATION", "LOCATION_CODE", "REGION_CODE", "LANG", "SITE_ID", "BRANCHNAME", "UPDATEDON", "RESUME") AS 
  select C.ID CANDIDATE_ID,
       C.FIRSTNAME,
       C.LASTNAME,
       (case when C.MIDDLENAME is null then ' '
             else C.MIDDLENAME
             end) MIDDLENAME,
       CR.ID RESUME_ID,
       R.PREFERED_LOCATION,
       R.LOCATION_CODE,
       R.REGION_CODE,
       R.LANG,
       C.SITE_ID,
       B.BRANCHNAME,
       CR.UPDATEDON,
       CR.RESUME
from CANDIDATES C
        join CANDIDATERESUMES CR
             on C.id=CR.CANDIDATE_ID
        join CANDIDATEPREFERENCES CP
             on C.ID=CP.CANDIDATE_ID
        join REGIONS R
             on R.LOCATION_CODE=CP.PREFEREDLOCATION
        join BRANCHES B
             on C.BRANCH_ID=B.ID
order by C.FIRSTNAME,
       C.LASTNAME
/
CREATE OR REPLACE FORCE VIEW  "V_RECRUITER_REPORT" ("CANDIDATE_ID", "FIRSTNAME", "LASTNAME", "MIDDLENAME", "RESUME_ID", "BRANCHNAME", "SITE_ID", "ADVERTISEMENT_ID", "DATEAPPLIED") AS 
  select C.ID CANDIDATE_ID,
       C.FIRSTNAME,
       C.LASTNAME,
       (case when C.MIDDLENAME is null then ' '
             else C.MIDDLENAME
             end) MIDDLENAME,
       CR.ID RESUME_ID,
       B.BRANCHNAME,
       C.SITE_ID,
       (case when CJA.ADVERTISEMENT_ID is null then 0
       else CJA.ADVERTISEMENT_ID
       end) ADVERTISEMENT_ID,
       CJA.DATEAPPLIED DATEAPPLIED
from CANDIDATES C
        join CANDIDATERESUMES CR
             on c.id=CR.CANDIDATE_ID
        left outer join BRANCHES B
             on C.BRANCH_ID=B.ID
        left join CANDIDATEJOBAPPLICATIONS CJA
             on CJA.CANDIDATE_ID=C.ID
order by C.ID
/
CREATE OR REPLACE FORCE VIEW  "V_TMP_REGIONS" ("REGION_NAME", "LOCATION_NAME", "LONGITUDE", "LATITUDE") AS 
  select region_name, location_name, min(longitude) LONGITUDE, min(latitude) LATITUDE
from (
select distinct r.region_name, r.location_name, c.longitude, c.latitude
from tmp_regions r
inner join tmp_postal_codes c on r.region_name = c.region and r.location_name = c.location)
group by region_name, location_name
/
CREATE OR REPLACE FORCE VIEW  "V_TMP_REGIONS_2" ("REGION_NAME", "LOCATION_NAME", "LONGITUDE", "LATITUDE") AS 
  select region_name, location_name, min(longitude) LONGITUDE, min(latitude) LATITUDE
from (
select distinct r.region_name, r.location_name, r.longitude, r.latitude
from tmp_regions_2 r)
group by region_name, location_name
/

			
	

	
